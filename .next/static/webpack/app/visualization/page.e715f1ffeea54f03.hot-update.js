"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/visualization/page",{

/***/ "(app-pages-browser)/./src/components/DataVisualization/AlluvialDiagram.tsx":
/*!**************************************************************!*\
  !*** ./src/components/DataVisualization/AlluvialDiagram.tsx ***!
  \**************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AlluvialDiagram; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var d3_sankey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-sankey */ \"(app-pages-browser)/./node_modules/d3-sankey/src/index.js\");\n/* harmony import */ var _shared_useVisualizationData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/useVisualizationData */ \"(app-pages-browser)/./src/components/DataVisualization/shared/useVisualizationData.ts\");\n/* harmony import */ var _shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared/colorUtils */ \"(app-pages-browser)/./src/components/DataVisualization/shared/colorUtils.ts\");\n/* harmony import */ var _lib_context_AppContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/context/AppContext */ \"(app-pages-browser)/./src/lib/context/AppContext.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\nconst availableFields = [\n    {\n        value: \"years_at_medtronic\",\n        label: \"Years at Medtronic\"\n    },\n    {\n        value: \"learning_style\",\n        label: \"Learning Style\"\n    },\n    {\n        value: \"shaped_by\",\n        label: \"Shaped By\"\n    },\n    {\n        value: \"peak_performance\",\n        label: \"Peak Performance\"\n    },\n    {\n        value: \"motivation\",\n        label: \"Motivation\"\n    }\n];\nconst YEARS_CATEGORIES = [\n    \"0-5\",\n    \"6-10\",\n    \"11-15\",\n    \"16-20\",\n    \"20+\"\n];\n// Move this function up so it is defined before use\nconst getValidYearsCategory = (years)=>{\n    if (typeof years !== \"number\" || isNaN(years) || years < 0) return \"0-5\";\n    if (years <= 5) return \"0-5\";\n    if (years <= 10) return \"6-10\";\n    if (years <= 15) return \"11-15\";\n    if (years <= 20) return \"16-20\";\n    return \"20+\";\n};\n// Custom wave path generator for Sankey links with bounds checking\nfunction sankeyLinkWave(d) {\n    let waveAmplitude = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 8, waveFrequency = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1.1, chartWidth = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 800, chartHeight = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 600;\n    // d has source/target: {x0, x1, y0, y1}\n    let x0 = d.source.x1;\n    let x1 = d.target.x0;\n    let y0 = d.y0;\n    let y1 = d.y1;\n    // Clamp coordinates to chart bounds to prevent overflow\n    x0 = Math.max(0, Math.min(chartWidth, x0));\n    x1 = Math.max(0, Math.min(chartWidth, x1));\n    y0 = Math.max(0, Math.min(chartHeight, y0));\n    y1 = Math.max(0, Math.min(chartHeight, y1));\n    const midX = (x0 + x1) / 2;\n    // Add a sine wave to the control points, but ensure they stay within bounds\n    const waveY0 = Math.max(0, Math.min(chartHeight, y0 + waveAmplitude * Math.sin(waveFrequency * Math.PI * 0.25)));\n    const waveY1 = Math.max(0, Math.min(chartHeight, y1 + waveAmplitude * Math.sin(waveFrequency * Math.PI * 0.75)));\n    return \"M\".concat(x0, \",\").concat(y0, \"\\n    C\").concat(midX, \",\").concat(waveY0, \" \").concat(midX, \",\").concat(waveY1, \" \").concat(x1, \",\").concat(y1);\n}\n// Custom horizontal link generator that clamps y0/y1 to node bounds\nfunction clampedSankeyLinkHorizontal() {\n    return function(d) {\n        // Clamp y0/y1 to node bounds\n        const sy = Math.max(d.source.y0, Math.min(d.source.y1, d.y0));\n        const ty = Math.max(d.target.y0, Math.min(d.target.y1, d.y1));\n        const x0 = d.source.x1;\n        const x1 = d.target.x0;\n        // Use a cubic Bezier for smoothness\n        const curvature = 0.5;\n        const xi = d3__WEBPACK_IMPORTED_MODULE_2__.interpolateNumber(x0, x1);\n        const x2 = xi(curvature);\n        const x3 = xi(1 - curvature);\n        return \"M\".concat(x0, \",\").concat(sy, \"C\").concat(x2, \",\").concat(sy, \" \").concat(x3, \",\").concat(ty, \" \").concat(x1, \",\").concat(ty);\n    };\n}\n// Note: Using theme-aware getNodeColor function from colorUtils\nfunction AlluvialDiagram(param) {\n    let { width = 800, height = 600, autoPlay = true, onQuestionChange } = param;\n    _s();\n    // Responsive: use state for width/height, fallback to props\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [containerWidth, setContainerWidth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(width);\n    const [containerHeight, setContainerHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(height);\n    // Responsive: observe container size\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!containerRef.current) return;\n        const observer = new window.ResizeObserver((entries)=>{\n            for (let entry of entries){\n                if (entry.contentRect) {\n                    setContainerWidth(entry.contentRect.width);\n                    setContainerHeight(entry.contentRect.height);\n                }\n            }\n        });\n        observer.observe(containerRef.current);\n        return ()=>observer.disconnect();\n    }, []);\n    const svgRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const { data, isLoading, error } = (0,_shared_useVisualizationData__WEBPACK_IMPORTED_MODULE_4__.useVisualizationData)();\n    const { settings, getCurrentThemeColors } = (0,_lib_context_AppContext__WEBPACK_IMPORTED_MODULE_6__.useAppContext)();\n    const [currentSource, setCurrentSource] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"years_at_medtronic\");\n    const [currentTarget, setCurrentTarget] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"learning_style\");\n    // Filter data based on test data setting\n    const filteredData = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!Array.isArray(data) || !data.length) return [];\n        return settings.useTestData ? data : data.filter((item)=>!item.test_data);\n    }, [\n        data,\n        settings.useTestData\n    ]);\n    // Compute sources and targets with validation\n    const sources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!Array.isArray(filteredData) || !filteredData.length) return [];\n        if (currentSource === \"years_at_medtronic\") {\n            return YEARS_CATEGORIES.filter((cat)=>filteredData.some((d)=>getValidYearsCategory(d.years_at_medtronic || 0) === cat));\n        } else {\n            return Array.from(new Set(filteredData.map((d)=>d[currentSource]))).filter((value)=>typeof value === \"string\" && value.length > 0);\n        }\n    }, [\n        filteredData,\n        currentSource\n    ]);\n    const targets = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!Array.isArray(filteredData) || !filteredData.length) return [];\n        if (currentTarget === \"years_at_medtronic\") {\n            return YEARS_CATEGORIES.filter((cat)=>filteredData.some((d)=>getValidYearsCategory(d.years_at_medtronic || 0) === cat));\n        } else {\n            // Sort target nodes consistently to maintain fixed positions\n            return Array.from(new Set(filteredData.map((d)=>currentTarget === \"years_at_medtronic\" ? getValidYearsCategory(d.years_at_medtronic || 0) : d[currentTarget]))).filter((value)=>typeof value === \"string\" && value.length > 0).sort(); // Add consistent sorting\n        }\n    }, [\n        filteredData,\n        currentTarget\n    ]);\n    // --- Responsive chart sizing based on data size ---\n    // Set sensible min/max chart dimensions\n    const MIN_CHART_HEIGHT = 180;\n    const MAX_CHART_HEIGHT = 700;\n    const MIN_CHART_WIDTH = 320;\n    const MAX_CHART_WIDTH = 1400;\n    // Calculate node count for sizing\n    const nodeCount = Math.max(sources.length, targets.length, 1);\n    // --- Sparse Data Tuning ---\n    // For sparse data, shrink chart and cap node/link size\n    let availableHeight = Math.max(MIN_CHART_HEIGHT, Math.min(containerHeight - 40, MAX_CHART_HEIGHT));\n    let maxNodeHeight = 48;\n    let maxLinkWidth = 32;\n    if (nodeCount <= 3) {\n        availableHeight = Math.max(MIN_CHART_HEIGHT, Math.min(220, availableHeight)); // Shrink chart height\n        maxNodeHeight = 28; // Cap node height\n        maxLinkWidth = 16; // Cap link thickness\n    }\n    if (nodeCount >= 10) {\n        availableHeight = Math.min(MAX_CHART_HEIGHT, Math.max(availableHeight, 500));\n    }\n    // Node height and padding logic\n    const minNodeHeight = 16;\n    const minPadding = 8;\n    let nodeHeight = Math.floor((availableHeight - (nodeCount + 1) * minPadding) / nodeCount);\n    nodeHeight = Math.max(minNodeHeight, Math.min(nodeHeight, maxNodeHeight));\n    let nodePadding = (availableHeight - nodeCount * nodeHeight) / (nodeCount + 1);\n    nodePadding = Math.max(nodePadding, minPadding);\n    // Dynamically scale label font size with node height (clamp between 12px and 28px)\n    const labelFontSize = Math.max(12, Math.min(28, Math.floor(nodeHeight * 0.5)));\n    // --- Dynamic margin calculation for full label visibility ---\n    // Helper to measure text width in px\n    function measureTextWidth(text, font) {\n        if (false) {} // fallback for SSR\n        if (!measureTextWidth._canvas) {\n            measureTextWidth._canvas = document.createElement(\"canvas\");\n        }\n        const canvas = measureTextWidth._canvas;\n        const context = canvas.getContext(\"2d\");\n        if (!context) return 100;\n        context.font = font;\n        return context.measureText(text).width;\n    }\n    // Font for measuring\n    const labelFont = \"bold \".concat(labelFontSize, \"px Avenir Next World, -apple-system, BlinkMacSystemFont, 'SF Pro', 'Roboto', sans-serif\");\n    const allLabels = [\n        ...sources,\n        ...targets\n    ];\n    const labelWidths = allLabels.map((label)=>measureTextWidth(label, labelFont));\n    const maxLabelWidth = Math.max(...labelWidths, 80); // fallback min\n    const labelPadding = 24;\n    const margin = {\n        top: 20,\n        right: maxLabelWidth + labelPadding,\n        bottom: 20,\n        left: maxLabelWidth + labelPadding\n    };\n    // Responsive chart width\n    let chartWidth = Math.max(MIN_CHART_WIDTH, Math.min(containerWidth - margin.left - margin.right, MAX_CHART_WIDTH));\n    let chartHeight = availableHeight;\n    // If very sparse, shrink width too\n    if (nodeCount <= 3) {\n        chartWidth = Math.max(MIN_CHART_WIDTH, Math.min(chartWidth, 420));\n    }\n    // If very dense, allow more width\n    if (nodeCount >= 10) {\n        chartWidth = Math.min(MAX_CHART_WIDTH, Math.max(chartWidth, 900));\n    }\n    // Debug logging\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"[AlluvialDiagram Debug]\");\n        console.log(\"  Container:\", containerWidth, \"x\", containerHeight);\n        console.log(\"  Chart:\", chartWidth, \"x\", chartHeight);\n        console.log(\"  Node count (sources/targets):\", sources.length, targets.length);\n        console.log(\"  nodeHeight:\", nodeHeight);\n        console.log(\"  nodePadding:\", nodePadding);\n        console.log(\"  labelFontSize:\", labelFontSize);\n    }, [\n        containerWidth,\n        containerHeight,\n        chartWidth,\n        chartHeight,\n        sources.length,\n        targets.length,\n        nodeHeight,\n        nodePadding,\n        labelFontSize\n    ]);\n    // Use refs to track current values without triggering re-renders\n    const currentSourceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(currentSource);\n    const currentTargetRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(currentTarget);\n    // Update refs when state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        currentSourceRef.current = currentSource;\n    }, [\n        currentSource\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        currentTargetRef.current = currentTarget;\n    }, [\n        currentTarget\n    ]);\n    const [insights, setInsights] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [hoveredNode, setHoveredNode] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [hoveredLink, setHoveredLink] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [tooltip, setTooltip] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [lastCategoryChange, setLastCategoryChange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        source: currentSource,\n        target: currentTarget\n    });\n    const [currentTargetIndex, setCurrentTargetIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [hoveredSourceIndex, setHoveredSourceIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [hoveredTargetIndex, setHoveredTargetIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isInFullOpacityState, setIsInFullOpacityState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [animationPhase, setAnimationPhase] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"full\");\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        timer: null,\n        running: false,\n        currentSourceIndex: 0,\n        currentTargetIndex: 0,\n        isPaused: false,\n        pausedAt: Date.now(),\n        resumeFrom: null,\n        cycleCount: 0\n    });\n    // Check for reduced motion preference\n    const prefersReducedMotion = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (false) {}\n        return window.matchMedia(\"(prefers-reduced-motion: reduce)\").matches;\n    }, []);\n    // Adjust animation durations based on motion preference\n    const animationDurations = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const baseSpeed = settings.autoPlaySpeed || 3000;\n        const reductionFactor = prefersReducedMotion ? 0.5 : 1;\n        return {\n            stepDuration: Math.max(800, baseSpeed / 8 * reductionFactor),\n            pauseDuration: Math.max(400, baseSpeed / 12 * reductionFactor),\n            categoryPauseDuration: Math.max(1500, baseSpeed / 3 * reductionFactor),\n            linkTransitionDuration: prefersReducedMotion ? 400 : 750\n        };\n    }, [\n        settings.autoPlaySpeed,\n        prefersReducedMotion\n    ]);\n    // Get visual order of source nodes (top-to-bottom as they appear)\n    const sortedSources = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        if (!filteredData.length || !chartWidth || !chartHeight) return sources;\n        const sourcesForNodes = [\n            ...sources\n        ];\n        if (currentSource === \"years_at_medtronic\") {\n            sourcesForNodes.sort((a, b)=>YEARS_CATEGORIES.indexOf(a) - YEARS_CATEGORIES.indexOf(b));\n        } else {\n            sourcesForNodes.sort();\n        }\n        // Create Sankey layout to get visual order\n        const nodes = [\n            ...sourcesForNodes.map((name)=>({\n                    id: \"\".concat(currentSource, \":\").concat(name),\n                    name,\n                    category: currentSource\n                })),\n            ...targets.map((name)=>({\n                    id: \"\".concat(currentTarget, \":\").concat(name),\n                    name,\n                    category: currentTarget\n                }))\n        ];\n        const linksMap = new Map();\n        filteredData.forEach((d)=>{\n            const source = currentSource === \"years_at_medtronic\" ? getValidYearsCategory(d.years_at_medtronic || 0) : d[currentSource];\n            const target = currentTarget === \"years_at_medtronic\" ? getValidYearsCategory(d.years_at_medtronic || 0) : d[currentTarget];\n            if (!sourcesForNodes.includes(source) || !targets.includes(target)) return;\n            const sourceId = \"\".concat(currentSource, \":\").concat(source);\n            const targetId = \"\".concat(currentTarget, \":\").concat(target);\n            const key = \"\".concat(sourceId, \"→\").concat(targetId);\n            if (!linksMap.has(key)) {\n                linksMap.set(key, {\n                    source: sourceId,\n                    target: targetId,\n                    value: 0\n                });\n            }\n            linksMap.get(key).value += 1;\n        });\n        const links = Array.from(linksMap.values());\n        const sankeyGenerator = (0,d3_sankey__WEBPACK_IMPORTED_MODULE_3__.sankey)().nodeId((d)=>d.id).nodeWidth(12).nodePadding(nodePadding).extent([\n            [\n                0,\n                0\n            ],\n            [\n                chartWidth,\n                chartHeight\n            ]\n        ]);\n        const sankeyData = sankeyGenerator({\n            nodes: nodes.map((d)=>({\n                    ...d\n                })),\n            links: links.map((d)=>({\n                    ...d\n                }))\n        });\n        // Get source nodes in visual order (top to bottom)\n        const sourceNodes = sankeyData.nodes.filter((d)=>d.category === currentSource).sort((a, b)=>a.y0 - b.y0);\n        return sourceNodes.map((d)=>d.name);\n    }, [\n        filteredData,\n        sources,\n        targets,\n        currentSource,\n        currentTarget,\n        chartWidth,\n        chartHeight,\n        nodePadding\n    ]);\n    // Enhanced animation function with comprehensive debug tracking\n    const animate = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        // Check if animation is paused\n        if (animationRef.current.isPaused) {\n            console.log(\"⏸️  Animation is paused, skipping cycle\");\n            return;\n        }\n        if (!animationRef.current.running || !filteredData.length) {\n            console.log(\"❌ Animation stopped:\", {\n                running: animationRef.current.running,\n                dataLength: filteredData.length\n            });\n            return;\n        }\n        // Safety check: prevent infinite loops\n        if (animationRef.current.cycleCount > 1000) {\n            console.log(\"\\uD83D\\uDED1 Animation cycle limit reached, resetting\");\n            animationRef.current.cycleCount = 0;\n            animationRef.current.currentSourceIndex = 0;\n            animationRef.current.currentTargetIndex = 0;\n        }\n        // Increment cycle counter\n        animationRef.current.cycleCount++;\n        // Set animation phase to highlighting\n        setAnimationPhase(\"highlighting\");\n        setIsInFullOpacityState(false);\n        // Set the hovered source index to match the animation\n        setHoveredSourceIndex(animationRef.current.currentSourceIndex);\n        const targetOptions = availableFields.filter((f)=>f.value !== currentSourceRef.current).map((f)=>f.value);\n        // Debug: Log the target options to verify they're correct\n        if (animationRef.current.currentSourceIndex === 0) {\n            console.log(\"\\uD83C\\uDFAF Available target options for\", currentSourceRef.current, \":\", targetOptions);\n        }\n        // COMPREHENSIVE DEBUG: Log current state with full detail\n        console.log(\"\\uD83D\\uDD0D ANIMATION CYCLE DEBUG:\", {\n            \"\\uD83D\\uDCCD Current Position\": {\n                sourceIndex: animationRef.current.currentSourceIndex,\n                targetIndex: animationRef.current.currentTargetIndex,\n                sourceName: sortedSources[animationRef.current.currentSourceIndex],\n                targetName: currentTargetRef.current\n            },\n            \"\\uD83D\\uDCCA Categories\": {\n                currentSource: currentSourceRef.current,\n                currentTarget: currentTargetRef.current,\n                sourceOptions: availableFields.map((f)=>f.value),\n                targetOptions\n            },\n            \"\\uD83D\\uDCC8 Progress\": {\n                sourceProgress: \"\".concat(animationRef.current.currentSourceIndex + 1, \"/\").concat(sortedSources.length),\n                targetProgress: \"\".concat(animationRef.current.currentTargetIndex + 1, \"/\").concat(targetOptions.length),\n                isLastSource: animationRef.current.currentSourceIndex >= sortedSources.length - 1,\n                hasMoreTargets: animationRef.current.currentTargetIndex < targetOptions.length - 1\n            },\n            \"\\uD83C\\uDFAF Sources\": sortedSources,\n            \"\\uD83C\\uDFAF Targets\": targetOptions,\n            \"⏱️  Timings\": animationDurations\n        });\n        if (animationRef.current.currentSourceIndex < sortedSources.length - 1) {\n            // Move to next source\n            const nextTimeout = animationDurations.stepDuration + animationDurations.pauseDuration;\n            const progress = \"\".concat(animationRef.current.currentSourceIndex + 1, \"/\").concat(sortedSources.length);\n            console.log(\"\\uD83C\\uDFAF Source \".concat(progress, \": Highlighting '\").concat(sortedSources[animationRef.current.currentSourceIndex], \"' → '\").concat(currentTargetRef.current, \"' for \").concat(nextTimeout, \"ms\"));\n            animationRef.current.timer = setTimeout(()=>{\n                if (!animationRef.current.running || animationRef.current.isPaused) return;\n                animationRef.current.currentSourceIndex++;\n                animate();\n            }, nextTimeout);\n        } else {\n            // After last source, check if we need to cycle targets or change source category\n            console.log(\"\\uD83D\\uDD0D END OF SOURCES - Checking target cycling:\", {\n                currentTargetIndex: animationRef.current.currentTargetIndex,\n                targetOptionsLength: targetOptions.length,\n                hasMoreTargets: animationRef.current.currentTargetIndex < targetOptions.length - 1,\n                availableTargets: targetOptions\n            });\n            if (animationRef.current.currentTargetIndex < targetOptions.length - 1) {\n                // Still have more target categories to cycle through\n                const targetProgress = \"\".concat(animationRef.current.currentTargetIndex + 2, \"/\").concat(targetOptions.length);\n                console.log(\"\\uD83D\\uDD04 ✅ COMPLETED ALL SOURCES for '\".concat(currentTargetRef.current, \"', moving to next target (\").concat(targetProgress, \")\"));\n                // Clear any existing timer to prevent conflicts\n                if (animationRef.current.timer) {\n                    clearTimeout(animationRef.current.timer);\n                    animationRef.current.timer = null;\n                }\n                animationRef.current.timer = setTimeout(()=>{\n                    if (!animationRef.current.running || animationRef.current.isPaused) return;\n                    setAnimationPhase(\"transitioning\");\n                    // Move to next target category\n                    animationRef.current.currentTargetIndex++;\n                    const nextTarget = targetOptions[animationRef.current.currentTargetIndex];\n                    console.log(\"\\uD83C\\uDFAF ✨ NEW TARGET CATEGORY:\", nextTarget, \"(\".concat(animationRef.current.currentTargetIndex + 1, \"/\").concat(targetOptions.length, \")\"));\n                    console.log(\"\\uD83D\\uDD0D Target progression debug:\", {\n                        previousTarget: currentTargetRef.current,\n                        nextTarget,\n                        currentTargetIndex: animationRef.current.currentTargetIndex,\n                        allTargetOptions: targetOptions\n                    });\n                    setCurrentTarget(nextTarget);\n                    setLastCategoryChange({\n                        source: currentSourceRef.current,\n                        target: nextTarget\n                    });\n                    onQuestionChange === null || onQuestionChange === void 0 ? void 0 : onQuestionChange(currentSourceRef.current, nextTarget);\n                    // Reset source index and restart with new target\n                    animationRef.current.currentSourceIndex = 0;\n                    // Start the next cycle after a brief pause\n                    setTimeout(()=>{\n                        if (animationRef.current.running && !animationRef.current.isPaused) {\n                            animate();\n                        }\n                    }, animationDurations.categoryPauseDuration);\n                }, animationDurations.categoryPauseDuration);\n            } else {\n                // We've cycled through all targets, now change the source category\n                console.log(\"\\uD83D\\uDD04 ✨ COMPLETED ALL TARGETS for '\".concat(currentSourceRef.current, \"' - Moving to next source category! ✨\"));\n                // Clear any existing timer to prevent conflicts\n                if (animationRef.current.timer) {\n                    clearTimeout(animationRef.current.timer);\n                    animationRef.current.timer = null;\n                }\n                animationRef.current.timer = setTimeout(()=>{\n                    if (!animationRef.current.running || animationRef.current.isPaused) return;\n                    setAnimationPhase(\"transitioning\");\n                    // Move to next source category\n                    const sourceOptions = availableFields.map((f)=>f.value);\n                    const currentSourceIndex = sourceOptions.indexOf(currentSourceRef.current);\n                    const nextSourceIndex = (currentSourceIndex + 1) % sourceOptions.length;\n                    const nextSource = sourceOptions[nextSourceIndex];\n                    console.log(\"\\uD83C\\uDFAF \\uD83C\\uDD95 NEW SOURCE CATEGORY:\", nextSource, \"- Starting fresh cycle with all targets\");\n                    // Calculate target options for the NEW source (including years_at_medtronic)\n                    const newTargetOptions = availableFields.filter((f)=>f.value !== nextSource).map((f)=>f.value);\n                    console.log(\"\\uD83D\\uDD0D New target options for\", nextSource, \":\", newTargetOptions);\n                    setCurrentSource(nextSource);\n                    // Reset both indices and start with first target again\n                    animationRef.current.currentSourceIndex = 0;\n                    animationRef.current.currentTargetIndex = 0;\n                    const firstTarget = newTargetOptions[0];\n                    setCurrentTarget(firstTarget);\n                    setLastCategoryChange({\n                        source: nextSource,\n                        target: firstTarget\n                    });\n                    onQuestionChange === null || onQuestionChange === void 0 ? void 0 : onQuestionChange(nextSource, firstTarget);\n                    // Start the next cycle after a longer pause\n                    setTimeout(()=>{\n                        if (animationRef.current.running && !animationRef.current.isPaused) {\n                            animate();\n                        }\n                    }, animationDurations.categoryPauseDuration * 1.5); // Longer pause for source category change\n                }, animationDurations.categoryPauseDuration);\n            }\n        }\n    }, [\n        data.length,\n        sortedSources.length,\n        onQuestionChange,\n        animationDurations,\n        availableFields\n    ]);\n    // Animation effect - restart when settings change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83C\\uDFAC Animation useEffect triggered:\", {\n            autoPlay,\n            isAutoPlayEnabled: settings.isAutoPlayEnabled,\n            dataLength: data.length,\n            svgRefExists: !!svgRef.current,\n            currentSource,\n            currentTarget,\n            autoPlaySpeed: settings.autoPlaySpeed,\n            isRunning: animationRef.current.running\n        });\n        if (!autoPlay || !settings.isAutoPlayEnabled) {\n            console.log(\"❌ Animation disabled\");\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n            animationRef.current.running = false;\n            setAnimationPhase(\"full\");\n            setIsInFullOpacityState(true);\n            return;\n        }\n        if (!filteredData.length) {\n            console.log(\"❌ No data available for animation\");\n            return;\n        }\n        if (!svgRef.current) {\n            console.log(\"❌ SVG ref not available\");\n            return;\n        }\n        // Restart animation when speed changes or on major changes\n        if (animationRef.current.running) {\n            console.log(\"\\uD83D\\uDD04 Restarting animation with new settings:\", {\n                sourceCategory: currentSource,\n                totalSources: sortedSources.length,\n                totalTargets: availableFields.filter((f)=>f.value !== currentSource).length,\n                speed: settings.autoPlaySpeed + \"ms\"\n            });\n            // Stop current animation\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n            animationRef.current.running = false;\n        }\n        // Start new animation cycle\n        console.log(\"✅ Starting animation cycle:\", {\n            sourceCategory: currentSource,\n            totalSources: sortedSources.length,\n            totalTargets: availableFields.filter((f)=>f.value !== currentSource).length,\n            speed: settings.autoPlaySpeed + \"ms\"\n        });\n        // Initialize animation state\n        animationRef.current.running = true;\n        animationRef.current.currentSourceIndex = 0;\n        animationRef.current.currentTargetIndex = 0;\n        animationRef.current.cycleCount = 0; // Reset cycle counter\n        // Start animation\n        animate();\n        return ()=>{\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n            animationRef.current.running = false;\n            setAnimationPhase(\"full\");\n            setIsInFullOpacityState(true);\n        };\n    }, [\n        autoPlay,\n        settings.isAutoPlayEnabled,\n        settings.autoPlaySpeed,\n        filteredData.length,\n        currentSource // Only restart on source changes, not target changes\n    ]);\n    const nodeLabelFontSize = 18; // larger for readability\n    const nodeLabelFontWeight = 700;\n    const nodeLabelColor = settings.isDarkMode ? \"#FFFFFF\" : \"#170F5F\";\n    const nodeLabelFontFamily = 'Avenir Next World, -apple-system, BlinkMacSystemFont, \"SF Pro\", \"Roboto\", sans-serif';\n    const nodeLabelOffset = 24;\n    // Local debug toggle for this component if no global admin context\n    const [localDebug, setLocalDebug] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [showThemeToggle, setShowThemeToggle] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const debugOn = localDebug;\n    // Debug Sankey data for outlines\n    const [debugSankeyData, setDebugSankeyData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!Array.isArray(sources) || !Array.isArray(targets)) return;\n        const nodes = [\n            ...sources.map((name)=>({\n                    id: \"source:\".concat(name),\n                    name,\n                    category: \"source\"\n                })),\n            ...targets.map((name)=>({\n                    id: \"target:\".concat(name),\n                    name,\n                    category: \"target\"\n                }))\n        ];\n        // Only create links if both sides have at least one node\n        const links = sources.length && targets.length ? [\n            {\n                source: \"source:\".concat(sources[0]),\n                target: \"target:\".concat(targets[0]),\n                value: 1\n            }\n        ] : [];\n        if (nodes.length < 2 || links.length < 1) return; // Prevent invalid array length\n        const sankeyGenerator = (0,d3_sankey__WEBPACK_IMPORTED_MODULE_3__.sankey)().nodeId((d)=>d.id).nodeWidth(12).nodePadding(nodePadding).extent([\n            [\n                0,\n                0\n            ],\n            [\n                chartWidth,\n                chartHeight\n            ]\n        ]);\n        const sankeyData = sankeyGenerator({\n            nodes: nodes.map((d)=>({\n                    ...d\n                })),\n            links: links.map((d)=>({\n                    ...d\n                }))\n        });\n        setDebugSankeyData(sankeyData);\n    }, [\n        sources,\n        targets,\n        chartWidth,\n        chartHeight,\n        nodePadding\n    ]);\n    // Render Sankey diagram\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current || !filteredData.length) return;\n        // --- Persistent SVG structure ---\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        svg.selectAll(\"*\").remove(); // Clear previous content\n        svg.attr(\"width\", containerWidth).attr(\"height\", containerHeight);\n        // --- Sankey node/link creation and vertical centering (deduplicated) ---\n        // Sort source nodes to maintain a fixed order (same as animation)\n        const sortedSources = [\n            ...sources\n        ];\n        if (currentSource === \"years_at_medtronic\") {\n            sortedSources.sort((a, b)=>YEARS_CATEGORIES.indexOf(a) - YEARS_CATEGORIES.indexOf(b));\n        } else {\n            sortedSources.sort();\n        }\n        // Sort target nodes to maintain a fixed order\n        const sortedTargets = [\n            ...targets\n        ];\n        if (currentTarget === \"years_at_medtronic\") {\n            sortedTargets.sort((a, b)=>YEARS_CATEGORIES.indexOf(a) - YEARS_CATEGORIES.indexOf(b));\n        } else {\n            sortedTargets.sort();\n        }\n        // Sankey transformation accessors\n        const sourceAccessor = (d)=>currentSource === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentSource];\n        const targetAccessor = (d)=>currentTarget === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentTarget];\n        // Filter data to only include valid values\n        const validData = filteredData.filter((d)=>(currentSource !== \"years_at_medtronic\" || d.years_at_medtronic !== null) && (currentTarget !== \"years_at_medtronic\" || d.years_at_medtronic !== null));\n        // Build nodes array with unique ids\n        const nodes = [\n            ...sortedSources.map((name)=>({\n                    id: \"\".concat(currentSource, \":\").concat(name),\n                    name,\n                    category: currentSource\n                })),\n            ...sortedTargets.map((name)=>({\n                    id: \"\".concat(currentTarget, \":\").concat(name),\n                    name,\n                    category: currentTarget\n                }))\n        ];\n        // Build links array (aggregate counts for each source-target pair)\n        const linksMap = new Map();\n        // 1. For every possible source-target pair, create a link (dummy if no data)\n        sortedSources.forEach((source)=>{\n            sortedTargets.forEach((target)=>{\n                const sourceId = \"\".concat(currentSource, \":\").concat(source);\n                const targetId = \"\".concat(currentTarget, \":\").concat(target);\n                const key = \"\".concat(sourceId, \"→\").concat(targetId);\n                linksMap.set(key, {\n                    source: sourceId,\n                    target: targetId,\n                    value: 0,\n                    isDummy: true\n                });\n            });\n        });\n        // 2. Fill in real data, marking links as not dummy\n        validData.forEach((d)=>{\n            const source = sourceAccessor(d);\n            const target = targetAccessor(d);\n            if (!sortedSources.includes(source) || !sortedTargets.includes(target)) return;\n            const sourceId = \"\".concat(currentSource, \":\").concat(source);\n            const targetId = \"\".concat(currentTarget, \":\").concat(target);\n            const key = \"\".concat(sourceId, \"→\").concat(targetId);\n            if (!linksMap.has(key)) {\n                linksMap.set(key, {\n                    source: sourceId,\n                    target: targetId,\n                    value: 1,\n                    isDummy: false\n                });\n            } else {\n                const link = linksMap.get(key);\n                link.value += 1;\n                link.isDummy = false;\n            }\n        });\n        // 3. Set dummy links to a very small value if still dummy\n        Array.from(linksMap.values()).forEach((link)=>{\n            if (link.isDummy) link.value = 0.0001;\n        });\n        // --- COLUMN HEIGHT NORMALIZATION ---\n        // Calculate total value for each side\n        const leftTotals = sortedSources.map((source)=>{\n            const sourceId = \"\".concat(currentSource, \":\").concat(source);\n            return Array.from(linksMap.values()).filter((l)=>l.source === sourceId).reduce((sum, l)=>sum + l.value, 0);\n        });\n        const rightTotals = sortedTargets.map((target)=>{\n            const targetId = \"\".concat(currentTarget, \":\").concat(target);\n            return Array.from(linksMap.values()).filter((l)=>l.target === targetId).reduce((sum, l)=>sum + l.value, 0);\n        });\n        const leftSum = leftTotals.reduce((a, b)=>a + b, 0);\n        const rightSum = rightTotals.reduce((a, b)=>a + b, 0);\n        // If sums are different, scale the smaller side's node values and link values\n        let leftScale = 1, rightScale = 1;\n        if (leftSum > 0 && rightSum > 0 && leftSum !== rightSum) {\n            if (leftSum > rightSum) {\n                rightScale = leftSum / rightSum;\n            } else {\n                leftScale = rightSum / leftSum;\n            }\n        }\n        // Scale links\n        Array.from(linksMap.values()).forEach((link)=>{\n            const sourceId = link.source;\n            const targetId = link.target;\n            if (leftScale !== 1 && sortedSources.some((s)=>\"\".concat(currentSource, \":\").concat(s) === sourceId)) {\n                link.value *= leftScale;\n            }\n            if (rightScale !== 1 && sortedTargets.some((t)=>\"\".concat(currentTarget, \":\").concat(t) === targetId)) {\n                link.value *= rightScale;\n            }\n        });\n        const links = Array.from(linksMap.values());\n        // --- DYNAMIC NODE PADDING ---\n        // Reduce nodePadding for sparse data\n        let dynamicNodePadding = nodePadding;\n        if (sortedSources.length <= 4 && sortedTargets.length <= 4) {\n            dynamicNodePadding = Math.max(8, nodePadding / 2);\n        }\n        // Sankey layout\n        const sankeyGenerator = (0,d3_sankey__WEBPACK_IMPORTED_MODULE_3__.sankey)().nodeId((d)=>d.id).nodeWidth(12).nodePadding(dynamicNodePadding).extent([\n            [\n                0,\n                0\n            ],\n            [\n                chartWidth,\n                chartHeight\n            ]\n        ]);\n        const sankeyData = sankeyGenerator({\n            nodes: nodes.map((d)=>({\n                    ...d\n                })),\n            links: links.map((d)=>({\n                    ...d\n                }))\n        });\n        // --- FORCE ROW ALIGNMENT IF NODE SETS MATCH ---\n        // If left and right node sets have the same length and order, align their y0/y1\n        const leftNodes = sankeyData.nodes.filter((n)=>n.category === currentSource);\n        const rightNodes = sankeyData.nodes.filter((n)=>n.category === currentTarget);\n        if (leftNodes.length === rightNodes.length && leftNodes.every((n, i)=>rightNodes[i] && n.name === rightNodes[i].name)) {\n            // Force y0/y1 of right nodes to match left nodes\n            rightNodes.forEach((n, i)=>{\n                n.y0 = leftNodes[i].y0;\n                n.y1 = leftNodes[i].y1;\n            });\n        }\n        // --- VISUAL GUIDES: Render horizontal bands for each row ---\n        svg.selectAll(\"rect.row-guide\").data(leftNodes).enter().append(\"rect\").attr(\"class\", \"row-guide\").attr(\"x\", -margin.left).attr(\"y\", (d)=>d.y0).attr(\"width\", chartWidth + margin.left + margin.right).attr(\"height\", (d)=>d.y1 - d.y0).attr(\"fill\", (d, i)=>settings.isDarkMode ? i % 2 === 0 ? \"#18191d\" : \"#141416\" // colors closer to background\n             : i % 2 === 0 ? \"#f5f7fa\" : \"#e9eef5\").attr(\"opacity\", settings.isDarkMode ? 0.15 : 0.25) // reduced opacity for dark mode\n        .lower();\n        // Compute vertical offset to center the diagram\n        const nodeYs = sankeyData.nodes.map((d)=>[\n                d.y0,\n                d.y1\n            ]).flat();\n        const minY = Math.min(...nodeYs);\n        const maxY = Math.max(...nodeYs);\n        const usedHeight = maxY - minY;\n        const offsetY = Math.max(0, (chartHeight - usedHeight) / 2 - minY);\n        // Create a group for the chart area with margin translation and vertical centering\n        const g = svg.append(\"g\").attr(\"transform\", \"translate(\".concat(margin.left, \",\").concat(margin.top + offsetY, \")\"));\n        let defs = svg.select(\"defs\");\n        if (defs.empty()) defs = svg.append(\"defs\");\n        let linksG = g.append(\"g\").attr(\"class\", \"links\");\n        let nodesG = g.append(\"g\").attr(\"class\", \"nodes\");\n        // Remove old gradients (no longer needed)\n        defs.selectAll(\"linearGradient.link-gradient\").remove();\n        // --- Add clipPath for links group with tighter bounds ---\n        svg.select(\"defs\").selectAll(\"#link-clip\").remove();\n        defs.append(\"clipPath\").attr(\"id\", \"link-clip\").append(\"rect\").attr(\"x\", margin.left).attr(\"y\", margin.top).attr(\"width\", chartWidth).attr(\"height\", chartHeight);\n        linksG.attr(\"clip-path\", \"url(#link-clip)\");\n        // Add glow filter for dark mode\n        defs.selectAll(\"#dark-mode-glow\").remove();\n        if (settings.isDarkMode) {\n            const glowFilter = defs.append(\"filter\").attr(\"id\", \"dark-mode-glow\").attr(\"x\", \"-50%\").attr(\"y\", \"-50%\").attr(\"width\", \"200%\").attr(\"height\", \"200%\");\n            glowFilter.append(\"feGaussianBlur\").attr(\"stdDeviation\", \"1.5\").attr(\"result\", \"coloredBlur\");\n            const feMerge = glowFilter.append(\"feMerge\");\n            feMerge.append(\"feMergeNode\").attr(\"in\", \"coloredBlur\");\n            feMerge.append(\"feMergeNode\").attr(\"in\", \"SourceGraphic\");\n        }\n        // --- Links update pattern ---\n        // All links are now between real nodes, with isDummy property for visual distinction\n        const filteredLinks = sankeyData.links;\n        // Remove mix-blend-mode in dark mode to prevent color washing out\n        linksG.style(\"mix-blend-mode\", settings.isDarkMode ? \"normal\" : \"multiply\");\n        const linkKey = (d)=>\"\".concat(d.source.id, \"→\").concat(d.target.id);\n        const linkSel = linksG.selectAll(\"path\").data(filteredLinks, linkKey);\n        // EXIT: fade out and remove all old links\n        linkSel.exit().transition().duration(400).attr(\"opacity\", 0).remove();\n        // Check if this is a category change that should trigger animation\n        const isCategoryChange = lastCategoryChange.source !== currentSource || lastCategoryChange.target !== currentTarget;\n        // ENTER: draw in all new links with improved animation\n        const newLinks = linksG.selectAll(\"path\").data(filteredLinks, linkKey).enter().append(\"path\").attr(\"d\", clampedSankeyLinkHorizontal()).attr(\"stroke\", (d)=>(0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getNodeColor)(d.source, getCurrentThemeColors(), settings.isDarkMode)).attr(\"stroke-width\", (d)=>Math.min(Math.max(settings.isDarkMode ? 2 : 1, d.width), maxLinkWidth)).attr(\"fill\", \"none\").attr(\"filter\", (d)=>{\n            if (hoveredLink === d) return \"url(#glow)\";\n            return settings.isDarkMode ? \"url(#dark-mode-glow)\" : null;\n        }).attr(\"pointer-events\", \"all\").attr(\"stroke-linecap\", \"round\").attr(\"opacity\", (d)=>{\n            // Dummy links: very low opacity\n            if (d.isDummy) return 0.08;\n            // Adjust opacity based on dark mode for better visibility\n            const baseOpacity = settings.isDarkMode ? 0.85 : 0.4;\n            const highlightOpacity = settings.isDarkMode ? 1.0 : 0.9;\n            const dimOpacity = settings.isDarkMode ? 0.4 : 0.1;\n            // Default opacity when no highlighting\n            if (animationPhase !== \"highlighting\") return baseOpacity;\n            // Highlight links from the active source\n            if (hoveredSourceIndex !== null) {\n                const hoveredSource = sortedSources[hoveredSourceIndex];\n                return d.source.name === hoveredSource ? highlightOpacity : dimOpacity;\n            }\n            // Highlight links to the active target\n            if (hoveredTargetIndex !== null) {\n                const hoveredTarget = sortedTargets[hoveredTargetIndex];\n                return d.target.name === hoveredTarget ? highlightOpacity : dimOpacity;\n            }\n            return baseOpacity;\n        }).attr(\"stroke-dasharray\", (d)=>d.isDummy ? \"4,4\" : null); // Dashed for dummy links\n        // Apply drawing animation only on category changes to prevent flickering\n        if (isCategoryChange) {\n            newLinks.each(function(d) {\n                const path = d3__WEBPACK_IMPORTED_MODULE_2__.select(this);\n                const totalLength = this.getTotalLength();\n                // Start with invisible path\n                path.attr(\"stroke-dasharray\", totalLength).attr(\"stroke-dashoffset\", totalLength).attr(\"opacity\", 0).transition().delay((d, i)=>i * 25) // Reduced stagger delay\n                .duration(600) // Reduced from 1200ms to 600ms\n                .ease(d3__WEBPACK_IMPORTED_MODULE_2__.easeCubicInOut).attr(\"opacity\", (d)=>{\n                    // Adjust opacity based on dark mode for better visibility\n                    const baseOpacity = settings.isDarkMode ? 0.85 : 0.4;\n                    const highlightOpacity = settings.isDarkMode ? 1.0 : 0.9;\n                    const dimOpacity = settings.isDarkMode ? 0.4 : 0.1;\n                    // Highlight links from the active source or to the active target\n                    if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                        const hoveredSource = sortedSources[hoveredSourceIndex];\n                        return d.source.name === hoveredSource ? highlightOpacity : dimOpacity;\n                    }\n                    if (hoveredTargetIndex !== null && animationPhase === \"highlighting\") {\n                        const hoveredTarget = sortedTargets[hoveredTargetIndex];\n                        return d.target.name === hoveredTarget ? highlightOpacity : dimOpacity;\n                    }\n                    return baseOpacity;\n                }).attr(\"stroke-dashoffset\", 0).on(\"end\", function() {\n                    d3__WEBPACK_IMPORTED_MODULE_2__.select(this).attr(\"stroke-linecap\", \"butt\") // crisp edge after animation\n                    .attr(\"stroke-dasharray\", null).attr(\"stroke-dashoffset\", null);\n                });\n            });\n        } else {\n            // For non-category changes, just set the opacity directly\n            newLinks.attr(\"opacity\", (d)=>{\n                // Adjust opacity based on dark mode for better visibility\n                const baseOpacity = settings.isDarkMode ? 0.85 : 0.4;\n                const highlightOpacity = settings.isDarkMode ? 1.0 : 0.9;\n                const dimOpacity = settings.isDarkMode ? 0.4 : 0.1;\n                // Highlight links from the active source or to the active target\n                if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                    const hoveredSource = sortedSources[hoveredSourceIndex];\n                    return d.source.name === hoveredSource ? highlightOpacity : dimOpacity;\n                }\n                if (hoveredTargetIndex !== null && animationPhase === \"highlighting\") {\n                    const hoveredTarget = sortedTargets[hoveredTargetIndex];\n                    return d.target.name === hoveredTarget ? highlightOpacity : dimOpacity;\n                }\n                return baseOpacity;\n            });\n        }\n        // Add hover interactions\n        newLinks.on(\"mousemove\", function(event, d) {\n            setHoveredLink(d);\n            setTooltip({\n                x: event.offsetX,\n                y: event.offsetY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"font-bold\",\n                            children: [\n                                d.source.name,\n                                \" → \",\n                                d.target.name\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                            lineNumber: 1041,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                d.value,\n                                \" attendees\"\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                            lineNumber: 1042,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                    lineNumber: 1040,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", function() {\n            setHoveredLink(null);\n            setTooltip(null);\n        });\n        // --- Nodes update pattern (rects) ---\n        const filteredNodes = sankeyData.nodes;\n        const nodeSel = nodesG.selectAll(\"rect\").data(filteredNodes, (d)=>d.id);\n        nodeSel.exit().remove();\n        nodeSel.join((enter)=>enter.append(\"rect\").attr(\"x\", (d)=>d.x0).attr(\"y\", (d)=>d.y0).attr(\"height\", (d)=>d.y1 - d.y0).attr(\"width\", (d)=>d.x1 - d.x0).attr(\"fill\", (d)=>{\n                const color = (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getNodeColor)(d, getCurrentThemeColors(), settings.isDarkMode);\n                // Fallback to a default color if getNodeColor returns invalid color\n                if (!color || color === \"#000000\" || color === \"black\" || color === \"#000\") {\n                    console.warn(\"Invalid color for node:\", d.name, d.category, \"using fallback\");\n                    return settings.isDarkMode ? \"#4a90e2\" : \"#2563eb\";\n                }\n                return color;\n            }).attr(\"stroke\", settings.isDarkMode ? \"#444\" : \"#22223b\").attr(\"opacity\", (d)=>{\n                // Source nodes: only the highlighted one is bright\n                if (d.category === currentSource) {\n                    if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                        return d.name === sortedSources[hoveredSourceIndex] ? 1 : 0.3;\n                    }\n                    return 0.9; // Increased from 0.6 to 0.9 for more prominence\n                }\n                // Target nodes: only those connected to the highlighted source or hovered target are bright\n                if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                    const hoveredSource = sortedSources[hoveredSourceIndex];\n                    const isConnected = filteredLinks.some((l)=>l.source.name === hoveredSource && l.target.name === d.name);\n                    return isConnected ? 1 : 0.3;\n                }\n                if (hoveredTargetIndex !== null && animationPhase === \"highlighting\") {\n                    const hoveredTarget = sortedTargets[hoveredTargetIndex];\n                    return d.name === hoveredTarget ? 1 : 0.3;\n                }\n                return 0.9; // Increased from 0.6 to 0.9 for more prominence\n            }).on(\"mousemove\", function(event, d) {\n                setHoveredNode(d);\n                setTooltip({\n                    x: event.offsetX,\n                    y: event.offsetY,\n                    content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"font-bold\",\n                                children: d.name\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                lineNumber: 1102,\n                                columnNumber: 17\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    \"Category: \",\n                                    d.category\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                lineNumber: 1103,\n                                columnNumber: 17\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                children: [\n                                    \"Responses: \",\n                                    d.value\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                lineNumber: 1104,\n                                columnNumber: 17\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                        lineNumber: 1101,\n                        columnNumber: 15\n                    }, this)\n                });\n            }).on(\"mouseleave\", function() {\n                setHoveredNode(null);\n                setTooltip(null);\n            }).on(\"mouseenter\", function(event, d) {\n                if (d.category === currentSource) {\n                    const idx = sortedSources.indexOf(d.name);\n                    setHoveredSourceIndex(idx);\n                    setAnimationPhase(\"highlighting\");\n                }\n                if (d.category === currentTarget) {\n                    const idx = sortedTargets.indexOf(d.name);\n                    setHoveredTargetIndex(idx);\n                    setAnimationPhase(\"highlighting\");\n                }\n            }).on(\"mouseleave\", function(event, d) {\n                if (d.category === currentSource) {\n                    setHoveredSourceIndex(null);\n                    setAnimationPhase(\"full\");\n                }\n                if (d.category === currentTarget) {\n                    setHoveredTargetIndex(null);\n                    setAnimationPhase(\"full\");\n                }\n            }), (update)=>update.transition(d3__WEBPACK_IMPORTED_MODULE_2__.transition().duration(750).ease(d3__WEBPACK_IMPORTED_MODULE_2__.easeCubicInOut)).attr(\"x\", (d)=>d.x0).attr(\"y\", (d)=>d.y0).attr(\"height\", (d)=>d.y1 - d.y0).attr(\"width\", (d)=>d.x1 - d.x0).attr(\"fill\", (d)=>(0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getNodeColor)(d, getCurrentThemeColors(), settings.isDarkMode)).attr(\"opacity\", (d)=>{\n                // Source nodes: only the highlighted one is bright\n                if (d.category === currentSource) {\n                    if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                        return d.name === sortedSources[hoveredSourceIndex] ? 1 : 0.3;\n                    }\n                    return 0.9; // Increased from 0.6 to 0.9 for more prominence\n                }\n                // Target nodes: only those connected to the highlighted source or hovered target are bright\n                if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                    const hoveredSource = sortedSources[hoveredSourceIndex];\n                    const isConnected = filteredLinks.some((l)=>l.source.name === hoveredSource && l.target.name === d.name);\n                    return isConnected ? 1 : 0.3;\n                }\n                if (hoveredTargetIndex !== null && animationPhase === \"highlighting\") {\n                    const hoveredTarget = sortedTargets[hoveredTargetIndex];\n                    return d.name === hoveredTarget ? 1 : 0.3;\n                }\n                return 0.9; // Increased from 0.6 to 0.9 for more prominence\n            }));\n        // --- Node labels (re-render as before) ---\n        g.selectAll(\"g.label-layer\").remove();\n        const labelLayer = g.append(\"g\").attr(\"class\", \"label-layer\");\n        const sourceNodeSet = new Set(sortedSources);\n        const targetNodeSet = new Set(sortedTargets);\n        const sourceNodes = sankeyData.nodes.filter((d)=>d.category === currentSource);\n        const targetNodes = sankeyData.nodes.filter((d)=>d.category === currentTarget);\n        sourceNodes.forEach((node)=>{\n            if (sourceNodeSet.has(node.name)) {\n                labelLayer.append(\"text\").attr(\"x\", -labelPadding).attr(\"y\", (node.y0 + node.y1) / 2).attr(\"text-anchor\", \"end\").attr(\"alignment-baseline\", \"middle\").attr(\"font-family\", nodeLabelFontFamily).attr(\"font-weight\", nodeLabelFontWeight).attr(\"font-size\", labelFontSize).attr(\"fill\", nodeLabelColor).attr(\"aria-label\", node.name).attr(\"opacity\", node.value === 0 ? 0.5 : 1).text(node.name);\n            }\n        });\n        targetNodes.forEach((node)=>{\n            if (targetNodeSet.has(node.name)) {\n                labelLayer.append(\"text\").attr(\"x\", chartWidth + labelPadding).attr(\"y\", (node.y0 + node.y1) / 2).attr(\"text-anchor\", \"start\").attr(\"alignment-baseline\", \"middle\").attr(\"font-family\", nodeLabelFontFamily).attr(\"font-weight\", nodeLabelFontWeight).attr(\"font-size\", labelFontSize).attr(\"fill\", nodeLabelColor).attr(\"aria-label\", node.name).attr(\"opacity\", node.value === 0 ? 0.5 : 1).text(node.name);\n            }\n        });\n        // 6. Update insights\n        let mostCommon = links.length > 0 ? links.reduce((a, b)=>b.value > a.value ? b : a, links[0]) : undefined;\n        setInsights([\n            {\n                title: \"Total Responses\",\n                value: data.length\n            },\n            {\n                title: \"Current View\",\n                value: \"\".concat(currentSource, \" → \").concat(currentTarget)\n            },\n            mostCommon ? {\n                title: \"Most Common Flow\",\n                value: \"\".concat(mostCommon.source.split(\":\")[1], \" → \").concat(mostCommon.target.split(\":\")[1]),\n                description: \"\".concat(mostCommon.value, \" attendees\")\n            } : {\n                title: \"Most Common Flow\",\n                value: \"N/A\",\n                description: \"\"\n            }\n        ]);\n        // 7. Automatic animation on question change only\n        const transition = d3__WEBPACK_IMPORTED_MODULE_2__.transition().duration(750).ease(d3__WEBPACK_IMPORTED_MODULE_2__.easeCubicInOut);\n        // Animate nodes\n        nodeSel.transition(transition).attr(\"x\", (d)=>d.x0).attr(\"y\", (d)=>d.y0).attr(\"height\", (d)=>d.y1 - d.y0).attr(\"width\", (d)=>d.x1 - d.x0).attr(\"fill\", (d)=>(0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getNodeColor)(d, getCurrentThemeColors(), settings.isDarkMode));\n    }, [\n        filteredData,\n        currentSource,\n        currentTarget,\n        containerWidth,\n        containerHeight,\n        settings.categoryColors,\n        settings.isDarkMode,\n        lastCategoryChange,\n        getCurrentThemeColors\n    ]);\n    // Create sorted targets for consistent highlighting\n    const sortedTargetsForHighlight = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        const sorted = [\n            ...targets\n        ];\n        if (currentTarget === \"years_at_medtronic\") {\n            sorted.sort((a, b)=>YEARS_CATEGORIES.indexOf(a) - YEARS_CATEGORIES.indexOf(b));\n        } else {\n            sorted.sort();\n        }\n        return sorted;\n    }, [\n        targets,\n        currentTarget\n    ]);\n    // Separate effect to update visual highlighting during animation\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        const g = svg.select(\"g\");\n        // Update node opacity based on animation state\n        g.selectAll(\"rect\").transition().duration(200).attr(\"opacity\", function(d) {\n            // Source nodes: only the highlighted one is bright\n            if (d.category === currentSource) {\n                if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                    return d.name === sortedSources[hoveredSourceIndex] ? 1 : 0.2; // Slightly higher for better visibility\n                }\n                return 0.9; // Increased from 0.6 to 0.9 for more prominence\n            }\n            // Target nodes: highlight those connected to the highlighted source\n            if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                const hoveredSource = sortedSources[hoveredSourceIndex];\n                // Check if this target node is connected to the highlighted source\n                const isConnected = svg.selectAll(\"path\").data().some((link)=>link.source.name === hoveredSource && link.target.name === d.name);\n                return isConnected ? 1 : 0.2; // Slightly higher for better visibility\n            }\n            if (hoveredTargetIndex !== null && animationPhase === \"highlighting\") {\n                const hoveredTarget = sortedTargetsForHighlight[hoveredTargetIndex];\n                return d.name === hoveredTarget ? 1 : 0.2;\n            }\n            return 0.9; // Increased from 0.6 to 0.9 for more prominence\n        }).attr(\"stroke-width\", function(d) {\n            // Add thicker stroke to highlighted source node\n            if (d.category === currentSource && hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n                return d.name === sortedSources[hoveredSourceIndex] ? 3 : 1;\n            }\n            return 1;\n        });\n        // Update link opacity based on animation state\n        g.selectAll(\"path\").transition().duration(200).attr(\"opacity\", function(d) {\n            // Adjust opacity based on dark mode for better visibility\n            const baseOpacity = settings.isDarkMode ? 0.85 : 0.4;\n            const highlightOpacity = settings.isDarkMode ? 1.0 : 0.95;\n            const dimOpacity = settings.isDarkMode ? 0.35 : 0.05;\n            // Default opacity when no highlighting\n            if (animationPhase !== \"highlighting\") return baseOpacity;\n            // Highlight links from the active source\n            if (hoveredSourceIndex !== null) {\n                const hoveredSource = sortedSources[hoveredSourceIndex];\n                return d.source.name === hoveredSource ? highlightOpacity : dimOpacity;\n            }\n            // Highlight links to the active target\n            if (hoveredTargetIndex !== null) {\n                const hoveredTarget = sortedTargetsForHighlight[hoveredTargetIndex];\n                return d.target.name === hoveredTarget ? highlightOpacity : dimOpacity;\n            }\n            return baseOpacity;\n        }).attr(\"stroke-width\", function(d) {\n            // Make highlighted links thicker\n            if (animationPhase === \"highlighting\" && hoveredSourceIndex !== null) {\n                const hoveredSource = sortedSources[hoveredSourceIndex];\n                return d.source.name === hoveredSource ? Math.max(2, d.width * 1.2) : Math.max(1, d.width);\n            }\n            return Math.max(1, d.width);\n        });\n        console.log(\"\\uD83C\\uDFA8 Visual highlighting updated:\", {\n            hoveredSourceIndex,\n            sourceName: hoveredSourceIndex !== null ? sortedSources[hoveredSourceIndex] : null,\n            hoveredTargetIndex,\n            targetName: hoveredTargetIndex !== null ? sortedTargetsForHighlight[hoveredTargetIndex] : null,\n            animationPhase\n        });\n    }, [\n        hoveredSourceIndex,\n        hoveredTargetIndex,\n        animationPhase,\n        sortedSources,\n        sortedTargetsForHighlight,\n        currentSource,\n        currentTarget\n    ]);\n    // Separate effect for hover interactions (doesn't re-render the whole visualization)\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        const g = svg.select(\"g\");\n        // Update link hover effects\n        g.selectAll(\"path\").each(function(d) {\n            const path = d3__WEBPACK_IMPORTED_MODULE_2__.select(this);\n            const isHovered = hoveredLink === d;\n            path.attr(\"filter\", isHovered ? \"url(#glow)\" : null);\n        });\n    }, [\n        hoveredNode,\n        hoveredLink\n    ]);\n    // Tooltip fadeout logic\n    const [tooltipVisible, setTooltipVisible] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const tooltipTimeoutRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (tooltip) {\n            setTooltipVisible(true);\n            if (tooltipTimeoutRef.current) clearTimeout(tooltipTimeoutRef.current);\n            tooltipTimeoutRef.current = setTimeout(()=>{\n                setTooltipVisible(false);\n                setTimeout(()=>setTooltip(null), 400); // Wait for fadeout\n            }, 5000);\n        } else {\n            setTooltipVisible(false);\n            if (tooltipTimeoutRef.current) clearTimeout(tooltipTimeoutRef.current);\n        }\n        return ()=>{\n            if (tooltipTimeoutRef.current) clearTimeout(tooltipTimeoutRef.current);\n        };\n    }, [\n        tooltip\n    ]);\n    const tooltipEl = tooltip ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: tooltip.x + 16,\n            top: tooltip.y + 16,\n            background: settings.isDarkMode ? \"rgba(20,20,30,0.98)\" : \"rgba(255,255,255,0.98)\",\n            color: settings.isDarkMode ? \"#fff\" : \"#170F5F\",\n            padding: \"8px 12px\",\n            borderRadius: 6,\n            pointerEvents: \"none\",\n            zIndex: 100,\n            fontFamily: \"Avenir Next World, sans-serif\",\n            fontWeight: 600,\n            fontSize: 14,\n            boxShadow: settings.isDarkMode ? \"0 4px 24px 0 rgba(16, 16, 235, 0.12)\" : \"0 4px 24px 0 rgba(0, 0, 0, 0.15)\",\n            border: settings.isDarkMode ? \"1px solid rgba(255,255,255,0.1)\" : \"1px solid rgba(0,0,0,0.1)\",\n            maxWidth: 280,\n            whiteSpace: \"nowrap\",\n            overflow: \"hidden\",\n            textOverflow: \"ellipsis\",\n            opacity: tooltipVisible ? 1 : 0,\n            transition: \"opacity 0.4s\"\n        },\n        role: \"tooltip\",\n        \"aria-live\": \"polite\",\n        children: tooltip.content\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n        lineNumber: 1368,\n        columnNumber: 5\n    }, this) : null;\n    // Create sorted sources array for highlighting (same as rendering and animation)\n    const sortedSourcesForHighlight = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        let visualOrder = [];\n        if (filteredData.length && chartWidth > 0 && chartHeight > 0) {\n            const sourcesForNodes = [\n                ...sources\n            ];\n            if (currentSource === \"years_at_medtronic\") {\n                sourcesForNodes.sort((a, b)=>YEARS_CATEGORIES.indexOf(a) - YEARS_CATEGORIES.indexOf(b));\n            } else {\n                sourcesForNodes.sort();\n            }\n            const nodes = [\n                ...sourcesForNodes.map((name)=>({\n                        id: \"\".concat(currentSource, \":\").concat(name),\n                        name,\n                        category: currentSource\n                    })),\n                ...targets.map((name)=>({\n                        id: \"\".concat(currentTarget, \":\").concat(name),\n                        name,\n                        category: currentTarget\n                    }))\n            ];\n            const linksMap = new Map();\n            filteredData.forEach((d)=>{\n                const source = currentSource === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentSource];\n                const target = currentTarget === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_5__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentTarget];\n                const sourceId = \"\".concat(currentSource, \":\").concat(source);\n                const targetId = \"\".concat(currentTarget, \":\").concat(target);\n                if (!sourcesForNodes.includes(source) || !targets.includes(target)) return;\n                const key = \"\".concat(sourceId, \"→\").concat(targetId);\n                if (!linksMap.has(key)) {\n                    linksMap.set(key, {\n                        source: sourceId,\n                        target: targetId,\n                        value: 0\n                    });\n                }\n                linksMap.get(key).value += 1;\n            });\n            const links = Array.from(linksMap.values());\n            const sankeyGenerator = (0,d3_sankey__WEBPACK_IMPORTED_MODULE_3__.sankey)().nodeId((d)=>d.id).nodeWidth(12).nodePadding(nodePadding).extent([\n                [\n                    0,\n                    0\n                ],\n                [\n                    chartWidth,\n                    chartHeight\n                ]\n            ]);\n            const sankeyData = sankeyGenerator({\n                nodes: nodes.map((d)=>({\n                        ...d\n                    })),\n                links: links.map((d)=>({\n                        ...d\n                    }))\n            });\n            const sourceNodes = sankeyData.nodes.filter((d)=>d.category === currentSource);\n            visualOrder = sourceNodes.slice().sort((a, b)=>a.y0 - b.y0).map((d)=>d.name);\n        }\n        return visualOrder.length ? visualOrder : [\n            ...sources\n        ];\n    }, [\n        filteredData,\n        currentSource,\n        currentTarget,\n        sources,\n        targets,\n        chartWidth,\n        chartHeight,\n        nodePadding\n    ]);\n    // Determine which source or target to highlight based on animation state\n    let highlightSourceName = null;\n    let highlightTargetName = null;\n    if (isInFullOpacityState) {\n        highlightSourceName = null;\n        highlightTargetName = null;\n    } else if (hoveredSourceIndex !== null && animationPhase === \"highlighting\") {\n        highlightSourceName = sortedSourcesForHighlight[hoveredSourceIndex];\n    } else if (hoveredTargetIndex !== null && animationPhase === \"highlighting\") {\n        highlightTargetName = targets[hoveredTargetIndex];\n    }\n    // Enhanced animation pause/resume with debug tracking\n    const pauseAnimation = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((reason)=>{\n        if (animationRef.current.running && !animationRef.current.isPaused) {\n            console.log(\"⏸️  PAUSING ANIMATION:\", reason, {\n                currentSourceIndex: animationRef.current.currentSourceIndex,\n                currentTargetIndex: animationRef.current.currentTargetIndex,\n                currentSource,\n                currentTarget\n            });\n            animationRef.current.isPaused = true;\n            animationRef.current.pausedAt = Date.now();\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n        }\n    }, [\n        currentSource,\n        currentTarget\n    ]);\n    const resumeAnimation = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((reason)=>{\n        if (animationRef.current.running && animationRef.current.isPaused) {\n            console.log(\"▶️  RESUMING ANIMATION:\", reason, {\n                currentSourceIndex: animationRef.current.currentSourceIndex,\n                currentTargetIndex: animationRef.current.currentTargetIndex,\n                pausedDuration: Date.now() - animationRef.current.pausedAt\n            });\n            animationRef.current.isPaused = false;\n            animationRef.current.resumeFrom = \"source\";\n            // Resume animation from current position with a small delay to ensure state is updated\n            setTimeout(()=>{\n                if (animationRef.current.running && !animationRef.current.isPaused) {\n                    animate();\n                }\n            }, 100);\n        }\n    }, [\n        animate\n    ]);\n    // Update hover handlers with proper state management\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        // Update link hover behavior\n        svg.selectAll(\"path\").on(\"mouseenter\", function(event, d) {\n            // Pause animation during hover\n            pauseAnimation(\"link hover\");\n            // Set hover states\n            setHoveredLink(d);\n            setAnimationPhase(\"highlighting\");\n            // Handle source node hover\n            if (d.source && d.source.category === currentSource) {\n                const idx = sortedSources.indexOf(d.source.name);\n                setHoveredSourceIndex(idx);\n                console.log(\"\\uD83C\\uDFAF Manual source highlight:\", d.source.name, \"index:\", idx);\n            }\n            // Handle target node hover\n            if (d.target && d.target.category === currentTarget) {\n                const idx = sortedTargetsForHighlight.indexOf(d.target.name);\n                setHoveredTargetIndex(idx);\n                console.log(\"\\uD83C\\uDFAF Manual target highlight:\", d.target.name, \"index:\", idx);\n            }\n        }).on(\"mouseleave\", function() {\n            // Resume animation\n            resumeAnimation(\"link hover end\");\n            // Clear hover states\n            setHoveredLink(null);\n            setHoveredSourceIndex(null);\n            setHoveredTargetIndex(null);\n            setAnimationPhase(\"full\");\n        });\n        // Update node hover behavior\n        svg.selectAll(\"rect\").on(\"mouseenter\", function(event, d) {\n            // Pause animation during hover\n            pauseAnimation(\"node hover\");\n            setAnimationPhase(\"highlighting\");\n            // Handle source node hover\n            if (d.category === currentSource) {\n                const idx = sortedSources.indexOf(d.name);\n                setHoveredSourceIndex(idx);\n                console.log(\"\\uD83C\\uDFAF Manual source node highlight:\", d.name, \"index:\", idx);\n            }\n            // Handle target node hover\n            if (d.category === currentTarget) {\n                const idx = sortedTargetsForHighlight.indexOf(d.name);\n                setHoveredTargetIndex(idx);\n                console.log(\"\\uD83C\\uDFAF Manual target node highlight:\", d.name, \"index:\", idx);\n            }\n        }).on(\"mouseleave\", function() {\n            // Resume animation\n            resumeAnimation(\"node hover end\");\n            // Clear hover states\n            setHoveredSourceIndex(null);\n            setHoveredTargetIndex(null);\n            setAnimationPhase(\"full\");\n        });\n        return ()=>{\n            // Clean up all event listeners\n            svg.selectAll(\"path, rect\").on(\"mouseenter\", null).on(\"mouseleave\", null);\n        };\n    }, [\n        sortedSources,\n        sortedTargetsForHighlight,\n        currentSource,\n        currentTarget,\n        pauseAnimation,\n        resumeAnimation\n    ]);\n    // Main rendering effect\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current || !data.length) return;\n    // The main rendering logic handles all opacity updates\n    // This ensures data binding is correct and prevents the undefined error\n    }, [\n        filteredData,\n        hoveredSourceIndex,\n        hoveredTargetIndex,\n        animationPhase,\n        sortedSources,\n        targets,\n        currentSource,\n        currentTarget\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            minHeight: 220,\n            minWidth: 320,\n            position: \"relative\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    position: \"absolute\",\n                    top: 10,\n                    left: 10,\n                    right: 10,\n                    display: \"flex\",\n                    justifyContent: \"space-between\",\n                    alignItems: \"center\",\n                    zIndex: 20,\n                    pointerEvents: \"none\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            pointerEvents: \"auto\"\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                            value: currentSource,\n                            onChange: (e)=>setCurrentSource(e.target.value),\n                            style: {\n                                padding: \"8px 12px\",\n                                borderRadius: \"6px\",\n                                border: settings.isDarkMode ? \"1px solid #444\" : \"1px solid #ccc\",\n                                background: settings.isDarkMode ? \"#2a2a2a\" : \"#fff\",\n                                color: settings.isDarkMode ? \"#fff\" : \"#000\",\n                                fontSize: \"14px\",\n                                fontFamily: \"Avenir Next World, sans-serif\"\n                            },\n                            children: availableFields.map((field)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: field.value,\n                                    children: field.label\n                                }, field.value, false, {\n                                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                    lineNumber: 1616,\n                                    columnNumber: 15\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                            lineNumber: 1602,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                        lineNumber: 1601,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        style: {\n                            pointerEvents: \"auto\"\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"select\", {\n                            value: currentTarget,\n                            onChange: (e)=>setCurrentTarget(e.target.value),\n                            style: {\n                                padding: \"8px 12px\",\n                                borderRadius: \"6px\",\n                                border: settings.isDarkMode ? \"1px solid #444\" : \"1px solid #ccc\",\n                                background: settings.isDarkMode ? \"#2a2a2a\" : \"#fff\",\n                                color: settings.isDarkMode ? \"#fff\" : \"#000\",\n                                fontSize: \"14px\",\n                                fontFamily: \"Avenir Next World, sans-serif\"\n                            },\n                            children: availableFields.map((field)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"option\", {\n                                    value: field.value,\n                                    children: field.label\n                                }, field.value, false, {\n                                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                    lineNumber: 1637,\n                                    columnNumber: 15\n                                }, this))\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                            lineNumber: 1623,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                        lineNumber: 1622,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                lineNumber: 1590,\n                columnNumber: 7\n            }, this),\n            (nodeCount <= 2 || sources.length <= 1 || targets.length <= 1) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    position: \"absolute\",\n                    top: 80,\n                    left: \"50%\",\n                    transform: \"translateX(-50%)\",\n                    background: \"rgba(255,255,200,0.95)\",\n                    color: \"#170F5F\",\n                    padding: \"12px 24px\",\n                    borderRadius: 8,\n                    fontWeight: 600,\n                    fontSize: 18,\n                    zIndex: 10,\n                    boxShadow: \"0 2px 12px 0 rgba(0,0,0,0.08)\"\n                },\n                children: \"Not enough data to show a meaningful flow diagram.\"\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                lineNumber: 1647,\n                columnNumber: 9\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                ref: svgRef,\n                width: chartWidth + margin.left + margin.right,\n                height: chartHeight + margin.top + margin.bottom,\n                viewBox: \"0 0 \".concat(chartWidth + margin.left + margin.right, \" \").concat(chartHeight + margin.top + margin.bottom),\n                style: {\n                    display: \"block\",\n                    width: \"100%\",\n                    height: \"100%\",\n                    background: \"transparent\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                        transform: \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\")\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                        lineNumber: 1672,\n                        columnNumber: 9\n                    }, this),\n                    debugOn && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"g\", {\n                        transform: \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\"),\n                        children: [\n                            Array.isArray(debugSankeyData === null || debugSankeyData === void 0 ? void 0 : debugSankeyData.nodes) && debugSankeyData.nodes.map((d, i)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"rect\", {\n                                    x: d.x0,\n                                    y: d.y0,\n                                    width: d.x1 - d.x0,\n                                    height: d.y1 - d.y0,\n                                    fill: \"none\",\n                                    stroke: \"magenta\",\n                                    strokeDasharray: \"4 2\",\n                                    pointerEvents: \"none\"\n                                }, \"debug-node-\".concat(i), false, {\n                                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                    lineNumber: 1680,\n                                    columnNumber: 15\n                                }, this)),\n                            Array.isArray(debugSankeyData === null || debugSankeyData === void 0 ? void 0 : debugSankeyData.links) && debugSankeyData.links.map((d, i)=>{\n                                const path = clampedSankeyLinkHorizontal()(d) || \"\";\n                                return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"path\", {\n                                    d: path,\n                                    fill: \"none\",\n                                    stroke: \"cyan\",\n                                    strokeWidth: 2,\n                                    pointerEvents: \"none\"\n                                }, \"debug-link-\".concat(i), false, {\n                                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                                    lineNumber: 1696,\n                                    columnNumber: 17\n                                }, this);\n                            })\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                        lineNumber: 1677,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n                lineNumber: 1664,\n                columnNumber: 7\n            }, this),\n            tooltipEl\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\AlluvialDiagram.tsx\",\n        lineNumber: 1588,\n        columnNumber: 5\n    }, this);\n}\n_s(AlluvialDiagram, \"6gYfAdpGWkB9+1STC2gDcKJDM6o=\", false, function() {\n    return [\n        _shared_useVisualizationData__WEBPACK_IMPORTED_MODULE_4__.useVisualizationData,\n        _lib_context_AppContext__WEBPACK_IMPORTED_MODULE_6__.useAppContext\n    ];\n});\n_c = AlluvialDiagram;\nvar _c;\n$RefreshReg$(_c, \"AlluvialDiagram\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/DataVisualization/AlluvialDiagram.tsx\n"));

/***/ })

});