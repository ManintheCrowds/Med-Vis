"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/visualization/page",{

/***/ "(app-pages-browser)/./src/components/DataVisualization/ChordDiagram.tsx":
/*!***********************************************************!*\
  !*** ./src/components/DataVisualization/ChordDiagram.tsx ***!
  \***********************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ChordDiagram; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\");\n/* harmony import */ var _shared_useVisualizationData__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shared/useVisualizationData */ \"(app-pages-browser)/./src/components/DataVisualization/shared/useVisualizationData.ts\");\n/* harmony import */ var _shared_QuestionSelector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./shared/QuestionSelector */ \"(app-pages-browser)/./src/components/DataVisualization/shared/QuestionSelector.tsx\");\n/* harmony import */ var _shared_chordUtils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./shared/chordUtils */ \"(app-pages-browser)/./src/components/DataVisualization/shared/chordUtils.ts\");\n/* harmony import */ var _lib_context_AppContext__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @/lib/context/AppContext */ \"(app-pages-browser)/./src/lib/context/AppContext.tsx\");\n/* harmony import */ var _components_shared_GlobalControlsNav__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @/components/shared/GlobalControlsNav */ \"(app-pages-browser)/./src/components/shared/GlobalControlsNav.tsx\");\n/* harmony import */ var _shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./shared/colorUtils */ \"(app-pages-browser)/./src/components/DataVisualization/shared/colorUtils.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n// Helper to get color for a node using global context (theme-aware)\nfunction getNodeColor(nodeName, category, globalColors) {\n    let isDarkMode = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    const themeColors = isDarkMode ? globalColors.dark : globalColors.light;\n    if (category === \"years_at_medtronic\") {\n        var _themeColors_years_at_medtronic;\n        return ((_themeColors_years_at_medtronic = themeColors.years_at_medtronic) === null || _themeColors_years_at_medtronic === void 0 ? void 0 : _themeColors_years_at_medtronic[nodeName]) || \"#FF6B6B\";\n    }\n    // Use global colors if available, otherwise fallback to defaults\n    if (category === \"learning_style\") {\n        var _themeColors_learning_style;\n        return ((_themeColors_learning_style = themeColors.learning_style) === null || _themeColors_learning_style === void 0 ? void 0 : _themeColors_learning_style[nodeName]) || \"#60a5fa\";\n    }\n    if (category === \"peak_performance\") {\n        var _themeColors_peak_performance;\n        return ((_themeColors_peak_performance = themeColors.peak_performance) === null || _themeColors_peak_performance === void 0 ? void 0 : _themeColors_peak_performance[nodeName]) || \"#4F8EF7\";\n    }\n    if (category === \"motivation\") {\n        var _themeColors_motivation;\n        return ((_themeColors_motivation = themeColors.motivation) === null || _themeColors_motivation === void 0 ? void 0 : _themeColors_motivation[nodeName]) || \"#9467bd\";\n    }\n    if (category === \"shaped_by\") {\n        var _themeColors_shaped_by;\n        return ((_themeColors_shaped_by = themeColors.shaped_by) === null || _themeColors_shaped_by === void 0 ? void 0 : _themeColors_shaped_by[nodeName]) || \"#1f77b4\";\n    }\n    return \"#8884d8\";\n}\nfunction ChordDiagram(param) {\n    let { width = 1400, height = 1000, autoPlay = true, onRelationshipChange, enableRotation = true, showAllConnections = false } = param;\n    _s();\n    const svgRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const secondarySvgRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const { data, isLoading, error } = (0,_shared_useVisualizationData__WEBPACK_IMPORTED_MODULE_3__.useVisualizationData)();\n    const [currentSource, setCurrentSource] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"years_at_medtronic\");\n    const [currentTarget, setCurrentTarget] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"learning_style\");\n    const [insights, setInsights] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [tooltip, setTooltip] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const { settings } = (0,_lib_context_AppContext__WEBPACK_IMPORTED_MODULE_6__.useAppContext)();\n    const [lastCategoryChange, setLastCategoryChange] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        source: currentSource,\n        target: currentTarget\n    });\n    const [showSecondaryChord, setShowSecondaryChord] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    // Animation state management (similar to AlluvialDiagram)\n    const [animationPhase, setAnimationPhase] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"full\");\n    const [highlightedArcIndex, setHighlightedArcIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [highlightedSide, setHighlightedSide] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isAnimating, setIsAnimating] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    // Secondary chord animation state\n    const [secondaryAnimationPhase, setSecondaryAnimationPhase] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"full\");\n    const [secondaryHighlightedArcIndex, setSecondaryHighlightedArcIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [secondaryHighlightedSide, setSecondaryHighlightedSide] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Animation timing ref\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        timer: null,\n        running: false,\n        currentIndex: 0,\n        currentSide: \"left\",\n        isPaused: false\n    });\n    // Secondary chord animation timing ref\n    const secondaryAnimationRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)({\n        timer: null,\n        running: false,\n        currentIndex: 0,\n        currentSide: \"left\",\n        isPaused: false\n    });\n    // Define available fields for the selector\n    const availableFields = [\n        {\n            value: \"years_at_medtronic\",\n            label: \"Years at Medtronic\"\n        },\n        {\n            value: \"peak_performance\",\n            label: \"Peak Performance\"\n        },\n        {\n            value: \"learning_style\",\n            label: \"Learning Style\"\n        },\n        {\n            value: \"motivation\",\n            label: \"Motivation\"\n        },\n        {\n            value: \"shaped_by\",\n            label: \"Shaped By\"\n        }\n    ];\n    // Typography constants (theme-aware)\n    const labelFontSize = 20;\n    const labelFontWeight = 700;\n    const labelColor = settings.isDarkMode ? \"#ffffff\" : \"#170F5F\";\n    const labelFontFamily = 'Avenir Next World, -apple-system, BlinkMacSystemFont, \"SF Pro\", \"Roboto\", sans-serif';\n    // Check if peak performance is involved and show secondary chord\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const isPeakPerformanceInvolved = currentSource === \"peak_performance\" || currentTarget === \"peak_performance\";\n        setShowSecondaryChord(isPeakPerformanceInvolved);\n    }, [\n        currentSource,\n        currentTarget\n    ]);\n    // Secondary chord diagram for peak performance breakdown\n    const renderSecondaryChord = ()=>{\n        if (!secondarySvgRef.current || !data.length || isLoading) return;\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(secondarySvgRef.current);\n        svg.selectAll(\"*\").remove();\n        const filteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n        // Get all data for secondary chord (Years at Medtronic vs Peak Performance categories)\n        const secondaryData = filteredData.filter((d)=>d.peak_performance);\n        if (secondaryData.length < 5) return;\n        // Use same dimensions as main chord for consistency\n        const secondaryWidth = showSecondaryChord ? width * 0.45 : width;\n        const secondaryHeight = showSecondaryChord ? height * 0.8 : height * 0.85;\n        const secondaryMargin = {\n            top: 80,\n            right: 80,\n            bottom: 100,\n            left: 80\n        };\n        const secondaryChartWidth = secondaryWidth - secondaryMargin.left - secondaryMargin.right;\n        const secondaryChartHeight = secondaryHeight - secondaryMargin.top - secondaryMargin.bottom;\n        const secondaryRadius = Math.max(120, Math.min(secondaryChartWidth, secondaryChartHeight) / 2 - 60);\n        // Years categories and Peak Performance categories\n        const yearsCategories = [\n            \"0-5\",\n            \"6-10\",\n            \"11-15\",\n            \"16-20\",\n            \"20+\"\n        ];\n        const peakPerfCategories = Array.from(new Set(secondaryData.map((d)=>d.peak_performance))).filter(Boolean).sort();\n        // Create bipartite matrix: Years vs Peak Performance\n        const allCategories = [\n            ...yearsCategories,\n            ...peakPerfCategories\n        ];\n        const matrix = allCategories.map((sourceCategory, sourceIndex)=>allCategories.map((targetCategory, targetIndex)=>{\n                // Only create connections between years and peak performance (not within same type)\n                const sourceIsYears = sourceIndex < yearsCategories.length;\n                const targetIsYears = targetIndex < yearsCategories.length;\n                // Only connect years to peak performance\n                if (sourceIsYears === targetIsYears) return 0;\n                // Count people who match this year + performance combination\n                const yearsCat = sourceIsYears ? sourceCategory : targetCategory;\n                const perfCat = sourceIsYears ? targetCategory : sourceCategory;\n                return secondaryData.filter((d)=>{\n                    const years = (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0);\n                    const perf = d.peak_performance;\n                    return years === yearsCat && perf === perfCat;\n                }).length;\n            }));\n        // Create chord layout\n        const chordLayout = d3__WEBPACK_IMPORTED_MODULE_2__.chord().padAngle(0.05);\n        const chordData = chordLayout(matrix);\n        const g = svg.append(\"g\").attr(\"transform\", \"translate(\".concat(secondaryMargin.left + secondaryChartWidth / 2, \", \").concat(secondaryMargin.top + secondaryChartHeight / 2, \")\"));\n        // Draw arcs\n        const arc = d3__WEBPACK_IMPORTED_MODULE_2__.arc().innerRadius(secondaryRadius * 0.75).outerRadius(secondaryRadius * 0.95);\n        const ribbon = d3__WEBPACK_IMPORTED_MODULE_2__.ribbon().radius(secondaryRadius * 0.75);\n        // Colors: different hues for years vs peak performance types\n        const yearsColors = [\n            \"#0077CC\",\n            \"#00A3E0\",\n            \"#4FC3F7\",\n            \"#81C784\",\n            \"#AED581\"\n        ]; // Blues/Greens for years\n        const perfColors = [\n            \"#FF6B6B\",\n            \"#FFD166\",\n            \"#06D6A0\",\n            \"#118AB2\",\n            \"#FF9F1C\",\n            \"#4ECDC4\"\n        ]; // Various colors for performance types\n        const colors = [\n            ...yearsColors,\n            ...perfColors.slice(0, peakPerfCategories.length)\n        ];\n        // Draw groups (arcs) with animation and hover effects\n        const groupSelection = g.selectAll(\".chord-group\").data(chordData.groups).enter().append(\"path\").attr(\"class\", \"chord-group\").attr(\"d\", arc).style(\"fill\", (d, i)=>colors[i % colors.length]).style(\"opacity\", 0).on(\"mouseenter\", function(event, d) {\n            var _allCategories_d_index;\n            pauseAnimation(\"secondary arc hover\");\n            // Trigger highlighting for secondary chord\n            console.log(\"\\uD83C\\uDFAF Secondary chord arc hover:\", {\n                groupIndex: d.index,\n                category: allCategories[d.index]\n            });\n            setSecondaryAnimationPhase(\"highlighting\");\n            setSecondaryHighlightedArcIndex(d.index);\n            setSecondaryHighlightedSide(d.index < yearsCategories.length ? \"left\" : \"right\");\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: ((_allCategories_d_index = allCategories[d.index]) === null || _allCategories_d_index === void 0 ? void 0 : _allCategories_d_index.toString().replace(/_/g, \" \")) || \"\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 235,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: d.index < yearsCategories.length ? \"Years at Medtronic\" : \"Peak Performance Type\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 236,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Value: \",\n                                d.value\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 237,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 234,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", ()=>{\n            resumeAnimation(\"secondary arc hover end\");\n            setTooltip(null);\n            // Reset highlighting when animation resumes\n            setSecondaryAnimationPhase(\"full\");\n            setSecondaryHighlightedArcIndex(null);\n            setSecondaryHighlightedSide(null);\n        });\n        // Apply transition animations to groups\n        groupSelection.transition().duration(750).style(\"opacity\", (d, i)=>{\n            // Apply full relationship chain highlighting\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === i) {\n                    return 1.0; // Source arc is fully highlighted\n                }\n                // Check if this arc is connected to the highlighted arc\n                if (secondaryHighlightedArcIndex !== null) {\n                    const isConnected = chordData.some((chord)=>chord.source.index === i && chord.target.index === secondaryHighlightedArcIndex || chord.source.index === secondaryHighlightedArcIndex && chord.target.index === i);\n                    return isConnected ? 0.95 : 0.3;\n                }\n            }\n            return 0.8;\n        }).style(\"stroke-width\", (d, i)=>{\n            if (secondaryAnimationPhase === \"highlighting\" && secondaryHighlightedArcIndex === i) {\n                return 3;\n            }\n            return 1;\n        }).style(\"stroke\", (d, i)=>{\n            if (secondaryAnimationPhase === \"highlighting\" && secondaryHighlightedArcIndex === i) {\n                return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n            }\n            return \"none\";\n        });\n        // Draw chords (ribbons) with animation and hover effects\n        const chordSelection = g.selectAll(\".chord\").data(chordData).enter().append(\"path\").attr(\"class\", \"chord\").attr(\"d\", ribbon).style(\"fill\", (d)=>colors[d.source.index % colors.length]).style(\"opacity\", 0).on(\"mouseenter\", function(event, d) {\n            pauseAnimation(\"secondary ribbon hover\");\n            // Trigger highlighting for the source side of this ribbon\n            console.log(\"\\uD83C\\uDFAF Secondary ribbon hover:\", {\n                sourceIndex: d.source.index,\n                targetIndex: d.target.index,\n                sourceCategory: allCategories[d.source.index],\n                targetCategory: allCategories[d.target.index]\n            });\n            setSecondaryAnimationPhase(\"highlighting\");\n            setSecondaryHighlightedArcIndex(d.source.index);\n            setSecondaryHighlightedSide(d.source.index < yearsCategories.length ? \"left\" : \"right\");\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: [\n                                allCategories[d.source.index],\n                                \" ↔ \",\n                                allCategories[d.target.index]\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 315,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Connections: \",\n                                d.source.value\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 318,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 314,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", function() {\n            resumeAnimation(\"secondary ribbon hover end\");\n            setTooltip(null);\n            // Reset highlighting when animation resumes\n            setSecondaryAnimationPhase(\"full\");\n            setSecondaryHighlightedArcIndex(null);\n            setSecondaryHighlightedSide(null);\n        });\n        // Apply transition animations to chords\n        chordSelection.transition().duration(750).style(\"opacity\", (d)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === d.source.index || secondaryHighlightedArcIndex === d.target.index) {\n                    return 0.95; // Make connected ribbons very prominent\n                }\n                return 0.2; // Dim non-connected ribbons\n            }\n            return settings.isDarkMode ? 0.7 : 0.6;\n        }).style(\"stroke-width\", (d)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === d.source.index || secondaryHighlightedArcIndex === d.target.index) {\n                    return 2.5;\n                }\n            }\n            return 0.5;\n        }).style(\"stroke\", (d)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === d.source.index || secondaryHighlightedArcIndex === d.target.index) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n            }\n            return \"none\";\n        });\n        // Add labels with proper spacing and rotation\n        const secondaryLabelRadius = Math.max(120, secondaryRadius * 1.45);\n        g.selectAll(\".chord-label\").data(chordData.groups).enter().append(\"text\").attr(\"class\", \"chord-label\").attr(\"transform\", (d)=>{\n            const angle = (d.startAngle + d.endAngle) / 2 - Math.PI / 2;\n            const x = secondaryLabelRadius * Math.cos(angle);\n            const y = secondaryLabelRadius * Math.sin(angle);\n            const rotation = angle * 180 / Math.PI;\n            // Rotate text for better readability\n            if (angle > Math.PI / 2 || angle < -Math.PI / 2) {\n                return \"translate(\".concat(x, \", \").concat(y, \") rotate(\").concat(rotation + 180, \")\");\n            } else {\n                return \"translate(\".concat(x, \", \").concat(y, \") rotate(\").concat(rotation, \")\");\n            }\n        }).attr(\"text-anchor\", (d)=>{\n            const angle = (d.startAngle + d.endAngle) / 2 - Math.PI / 2;\n            if (angle > Math.PI / 2 || angle < -Math.PI / 2) {\n                return \"end\";\n            } else {\n                return \"start\";\n            }\n        }).attr(\"alignment-baseline\", \"middle\").style(\"font-family\", labelFontFamily).style(\"font-weight\", labelFontWeight).style(\"font-size\", (d)=>{\n            // Dynamic font size based on number of labels\n            const totalLabels = allCategories.length;\n            if (totalLabels > 12) return \"13px\";\n            if (totalLabels > 10) return \"14px\";\n            if (totalLabels > 8) return \"15px\";\n            return \"16px\";\n        }).style(\"fill\", labelColor).style(\"text-transform\", \"uppercase\").text((d, i)=>{\n            var _allCategories_i;\n            const text = ((_allCategories_i = allCategories[i]) === null || _allCategories_i === void 0 ? void 0 : _allCategories_i.toString().replace(/_/g, \" \")) || \"\";\n            // Show full text for secondary chord labels\n            return text;\n        }).on(\"mouseenter\", function(event, d) {\n            var _allCategories_d_index;\n            const fullText = ((_allCategories_d_index = allCategories[d.index]) === null || _allCategories_d_index === void 0 ? void 0 : _allCategories_d_index.toString().replace(/_/g, \" \")) || \"\";\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: fullText\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 416,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: d.index < yearsCategories.length ? \"Years at Medtronic\" : \"Peak Performance Type\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 417,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 415,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", ()=>setTooltip(null));\n    };\n    // Helper function to ensure source and target are different\n    const ensureDifferentCategories = (source, target)=>{\n        if (source === target) {\n            // Find a different target\n            const differentOption = availableFields.find((field)=>field.value !== source);\n            return {\n                source,\n                target: differentOption ? differentOption.value : \"learning_style\"\n            };\n        }\n        return {\n            source,\n            target\n        };\n    };\n    // Ensure initial state doesn't have same categories\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const corrected = ensureDifferentCategories(currentSource, currentTarget);\n        if (corrected.source !== currentSource || corrected.target !== currentTarget) {\n            setCurrentSource(corrected.source);\n            setCurrentTarget(corrected.target);\n        }\n    }, []);\n    // Track current mode index with ref to avoid dependency issues\n    const currentModeIndexRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    // Update mode index when source/target changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const modeIndex = _shared_chordUtils__WEBPACK_IMPORTED_MODULE_5__.cyclingModes.findIndex((mode)=>mode.source === currentSource && mode.target === currentTarget);\n        if (modeIndex !== -1) {\n            currentModeIndexRef.current = modeIndex;\n        }\n    }, [\n        currentSource,\n        currentTarget\n    ]);\n    // Auto-cycling logic with stable dependencies\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83C\\uDFB5 ChordDiagram auto-cycling useEffect:\", {\n            autoPlay,\n            isAutoPlayEnabled: settings.isAutoPlayEnabled,\n            autoPlaySpeed: settings.autoPlaySpeed\n        });\n        if (!autoPlay || !settings.isAutoPlayEnabled) {\n            console.log(\"❌ ChordDiagram auto-cycling disabled\");\n            return;\n        }\n        console.log(\"✅ ChordDiagram starting auto-cycling\");\n        const interval = setInterval(()=>{\n            const nextModeIndex = (currentModeIndexRef.current + 1) % _shared_chordUtils__WEBPACK_IMPORTED_MODULE_5__.cyclingModes.length;\n            const nextMode = _shared_chordUtils__WEBPACK_IMPORTED_MODULE_5__.cyclingModes[nextModeIndex];\n            // Safety check: ensure source and target are different\n            if (nextMode.source === nextMode.target) {\n                console.warn(\"Skipping invalid cycling mode with same source and target:\", nextMode);\n                return;\n            }\n            console.log(\"\\uD83D\\uDD04 ChordDiagram cycling to:\", {\n                from: \"mode \".concat(currentModeIndexRef.current),\n                to: \"\".concat(nextMode.source, \" → \").concat(nextMode.target),\n                modeIndex: nextModeIndex\n            });\n            currentModeIndexRef.current = nextModeIndex;\n            setCurrentSource(nextMode.source);\n            setCurrentTarget(nextMode.target);\n            setLastCategoryChange({\n                source: nextMode.source,\n                target: nextMode.target\n            });\n            onRelationshipChange === null || onRelationshipChange === void 0 ? void 0 : onRelationshipChange(nextMode.source, nextMode.target);\n        }, settings.autoPlaySpeed || 6000);\n        return ()=>{\n            console.log(\"\\uD83E\\uDDF9 ChordDiagram cleaning up auto-cycling interval\");\n            clearInterval(interval);\n        };\n    }, [\n        autoPlay,\n        settings.isAutoPlayEnabled,\n        settings.autoPlaySpeed\n    ]); // Stable dependencies only\n    // Remove pulsing animation to eliminate flickering - will use CSS animations instead if needed\n    // Arc highlighting animation with connected ribbons\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        console.log(\"\\uD83D\\uDD04 ChordDiagram arc highlighting effect:\", {\n            autoPlay,\n            isAutoPlayEnabled: settings.isAutoPlayEnabled,\n            dataLength: data.length\n        });\n        if (!autoPlay || !settings.isAutoPlayEnabled || !data.length) {\n            console.log(\"❌ Arc highlighting disabled\");\n            // Reset to full opacity when animation is disabled\n            setAnimationPhase(\"full\");\n            setHighlightedArcIndex(null);\n            setHighlightedSide(null);\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n            animationRef.current.running = false;\n            return;\n        }\n        const animate = ()=>{\n            if (!animationRef.current.running || animationRef.current.isPaused) return;\n            console.log(\"\\uD83C\\uDFAF ChordDiagram arc animation:\", {\n                side: animationRef.current.currentSide,\n                index: animationRef.current.currentIndex\n            });\n            setAnimationPhase(\"highlighting\");\n            setHighlightedArcIndex(animationRef.current.currentIndex);\n            setHighlightedSide(animationRef.current.currentSide);\n            // Log what connections will be highlighted\n            const debugFilteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n            const debugLeftValues = currentSource === \"years_at_medtronic\" ? [\n                \"0-5\",\n                \"6-10\",\n                \"11-15\",\n                \"16-20\",\n                \"20+\"\n            ] : Array.from(new Set(debugFilteredData.map((d)=>d[currentSource]))).filter(Boolean);\n            const debugRightValues = currentTarget === \"years_at_medtronic\" ? [\n                \"0-5\",\n                \"6-10\",\n                \"11-15\",\n                \"16-20\",\n                \"20+\"\n            ] : Array.from(new Set(debugFilteredData.map((d)=>d[currentTarget]))).filter(Boolean);\n            const highlightedCategory = animationRef.current.currentSide === \"left\" ? debugLeftValues[animationRef.current.currentIndex] : debugRightValues[animationRef.current.currentIndex];\n            console.log(\"✨ Highlighting full relationship chain for:\", {\n                sourceCategory: highlightedCategory,\n                sourceSide: animationRef.current.currentSide,\n                sourceIndex: animationRef.current.currentIndex\n            });\n            // Calculate timing based on global settings\n            const stepDuration = Math.max(1000, (settings.autoPlaySpeed || 3000) / 4);\n            const pauseDuration = Math.max(200, stepDuration / 6);\n            // Get current data context\n            const filteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n            const leftValues = currentSource === \"years_at_medtronic\" ? [\n                \"0-5\",\n                \"6-10\",\n                \"11-15\",\n                \"16-20\",\n                \"20+\"\n            ] : Array.from(new Set(filteredData.map((d)=>d[currentSource]))).filter(Boolean);\n            const rightValues = currentTarget === \"years_at_medtronic\" ? [\n                \"0-5\",\n                \"6-10\",\n                \"11-15\",\n                \"16-20\",\n                \"20+\"\n            ] : Array.from(new Set(filteredData.map((d)=>d[currentTarget]))).filter(Boolean);\n            const currentSideLength = animationRef.current.currentSide === \"left\" ? leftValues.length : rightValues.length;\n            // Move to next position\n            if (animationRef.current.currentIndex < currentSideLength - 1) {\n                animationRef.current.timer = setTimeout(()=>{\n                    if (animationRef.current.running && !animationRef.current.isPaused) {\n                        animationRef.current.currentIndex++;\n                        animate();\n                    }\n                }, stepDuration + pauseDuration);\n            } else {\n                // Switch sides or complete cycle\n                if (animationRef.current.currentSide === \"left\") {\n                    animationRef.current.currentSide = \"right\";\n                    animationRef.current.currentIndex = 0;\n                    animationRef.current.timer = setTimeout(()=>{\n                        if (animationRef.current.running && !animationRef.current.isPaused) {\n                            animate();\n                        }\n                    }, stepDuration);\n                } else {\n                    // Complete cycle - show full diagram briefly, then restart\n                    setAnimationPhase(\"full\");\n                    setHighlightedArcIndex(null);\n                    setHighlightedSide(null);\n                    animationRef.current.timer = setTimeout(()=>{\n                        if (animationRef.current.running && !animationRef.current.isPaused) {\n                            animationRef.current.currentSide = \"left\";\n                            animationRef.current.currentIndex = 0;\n                            animate();\n                        }\n                    }, stepDuration * 2);\n                }\n            }\n        };\n        // Start animation if not already running\n        if (!animationRef.current.running) {\n            console.log(\"✅ Starting ChordDiagram arc highlighting animation\");\n            animationRef.current.running = true;\n            animationRef.current.currentIndex = 0;\n            animationRef.current.currentSide = \"left\";\n            animationRef.current.isPaused = false;\n            animate();\n        } else {\n            console.log(\"⚠️ Arc highlighting animation already running\");\n        }\n        return ()=>{\n            console.log(\"\\uD83E\\uDDF9 Cleaning up ChordDiagram arc highlighting animation\");\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n            animationRef.current.running = false;\n            setAnimationPhase(\"full\");\n            setHighlightedArcIndex(null);\n            setHighlightedSide(null);\n        };\n    }, [\n        autoPlay,\n        settings.isAutoPlayEnabled,\n        data.length,\n        currentSource,\n        currentTarget,\n        settings.autoPlaySpeed,\n        settings.useTestData\n    ]);\n    // Secondary chord animation system\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!autoPlay || !settings.isAutoPlayEnabled || !data.length || !showSecondaryChord) {\n            // Stop animation if conditions not met\n            console.log(\"\\uD83D\\uDED1 Stopping secondary chord animation:\", {\n                autoPlay,\n                isAutoPlayEnabled: settings.isAutoPlayEnabled,\n                hasData: data.length > 0,\n                showSecondaryChord\n            });\n            if (secondaryAnimationRef.current.timer) {\n                clearTimeout(secondaryAnimationRef.current.timer);\n                secondaryAnimationRef.current.timer = null;\n            }\n            secondaryAnimationRef.current.running = false;\n            return;\n        }\n        const animateSecondary = ()=>{\n            if (!secondaryAnimationRef.current.running || secondaryAnimationRef.current.isPaused) return;\n            // Get secondary chord data context first\n            const filteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n            const secondaryData = filteredData.filter((d)=>d.peak_performance);\n            const yearsCategories = [\n                \"0-5\",\n                \"6-10\",\n                \"11-15\",\n                \"16-20\",\n                \"20+\"\n            ];\n            const peakPerfCategories = Array.from(new Set(secondaryData.map((d)=>d.peak_performance))).filter(Boolean).sort();\n            const allCategories = [\n                ...yearsCategories,\n                ...peakPerfCategories\n            ];\n            console.log(\"\\uD83C\\uDFAF SecondaryChord arc animation:\", {\n                side: secondaryAnimationRef.current.currentSide,\n                index: secondaryAnimationRef.current.currentIndex\n            });\n            setSecondaryAnimationPhase(\"highlighting\");\n            // Calculate the actual arc index based on side and position\n            const actualArcIndex = secondaryAnimationRef.current.currentSide === \"left\" ? secondaryAnimationRef.current.currentIndex // Left side: direct index (0-4)\n             : yearsCategories.length + secondaryAnimationRef.current.currentIndex; // Right side: offset by years count\n            setSecondaryHighlightedArcIndex(actualArcIndex);\n            setSecondaryHighlightedSide(secondaryAnimationRef.current.currentSide);\n            // Calculate timing based on global settings\n            const stepDuration = Math.max(1000, (settings.autoPlaySpeed || 3000) / 4);\n            const pauseDuration = Math.max(200, stepDuration / 6);\n            const currentSideLength = secondaryAnimationRef.current.currentSide === \"left\" ? yearsCategories.length : peakPerfCategories.length;\n            // Move to next position\n            if (secondaryAnimationRef.current.currentIndex < currentSideLength - 1) {\n                secondaryAnimationRef.current.timer = setTimeout(()=>{\n                    if (secondaryAnimationRef.current.running && !secondaryAnimationRef.current.isPaused) {\n                        secondaryAnimationRef.current.currentIndex++;\n                        animateSecondary();\n                    }\n                }, stepDuration + pauseDuration);\n            } else {\n                // Switch sides or complete cycle\n                if (secondaryAnimationRef.current.currentSide === \"left\") {\n                    secondaryAnimationRef.current.currentSide = \"right\";\n                    secondaryAnimationRef.current.currentIndex = 0;\n                    secondaryAnimationRef.current.timer = setTimeout(()=>{\n                        if (secondaryAnimationRef.current.running && !secondaryAnimationRef.current.isPaused) {\n                            animateSecondary();\n                        }\n                    }, stepDuration);\n                } else {\n                    // Complete cycle - show full diagram briefly, then restart\n                    setSecondaryAnimationPhase(\"full\");\n                    setSecondaryHighlightedArcIndex(null);\n                    setSecondaryHighlightedSide(null);\n                    secondaryAnimationRef.current.timer = setTimeout(()=>{\n                        if (secondaryAnimationRef.current.running && !secondaryAnimationRef.current.isPaused) {\n                            secondaryAnimationRef.current.currentSide = \"left\";\n                            secondaryAnimationRef.current.currentIndex = 0;\n                            animateSecondary();\n                        }\n                    }, stepDuration * 2);\n                }\n            }\n        };\n        // Start animation if not already running\n        if (!secondaryAnimationRef.current.running) {\n            console.log(\"✅ Starting SecondaryChord arc highlighting animation\");\n            secondaryAnimationRef.current.running = true;\n            secondaryAnimationRef.current.currentIndex = 0;\n            secondaryAnimationRef.current.currentSide = \"left\";\n            secondaryAnimationRef.current.isPaused = false;\n            animateSecondary();\n        } else {\n            console.log(\"⚠️ Secondary arc highlighting animation already running\");\n        }\n        return ()=>{\n            console.log(\"\\uD83E\\uDDF9 Cleaning up SecondaryChord arc highlighting animation\");\n            if (secondaryAnimationRef.current.timer) {\n                clearTimeout(secondaryAnimationRef.current.timer);\n                secondaryAnimationRef.current.timer = null;\n            }\n            secondaryAnimationRef.current.running = false;\n            setSecondaryAnimationPhase(\"full\");\n            setSecondaryHighlightedArcIndex(null);\n            setSecondaryHighlightedSide(null);\n        };\n    }, [\n        autoPlay,\n        settings.isAutoPlayEnabled,\n        data.length,\n        showSecondaryChord,\n        settings.autoPlaySpeed,\n        settings.useTestData\n    ]);\n    // Re-render secondary chord when its animation state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (showSecondaryChord) {\n            renderSecondaryChord();\n        }\n    }, [\n        showSecondaryChord,\n        data,\n        settings.useTestData,\n        settings.isDarkMode\n    ]);\n    // Update visual styling of existing main chord elements when animation state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current) return;\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        // Update left arcs opacity and stroke based on animation state\n        svg.selectAll(\"path.left-arc\").transition().duration(300).style(\"opacity\", (d, i)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\") {\n                    if (i === highlightedArcIndex) {\n                        return 1.0; // Source arc is fully highlighted\n                    }\n                    return 0.4; // Dim other left arcs\n                }\n            }\n            return 0.8; // Default opacity\n        }).style(\"stroke-width\", (d, i)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && i === highlightedArcIndex) {\n                    return 3;\n                }\n            }\n            return 1;\n        }).style(\"stroke\", (d, i)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && i === highlightedArcIndex) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n            }\n            return \"none\";\n        });\n        // Update right arcs opacity and stroke based on animation state\n        svg.selectAll(\"path.right-arc\").transition().duration(300).style(\"opacity\", (d, i)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"right\") {\n                    if (i === highlightedArcIndex) {\n                        return 1.0; // Source arc is fully highlighted\n                    }\n                    return 0.4; // Dim other right arcs\n                }\n            }\n            return 0.8; // Default opacity\n        }).style(\"stroke-width\", (d, i)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"right\" && i === highlightedArcIndex) {\n                    return 3;\n                }\n            }\n            return 1;\n        }).style(\"stroke\", (d, i)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"right\" && i === highlightedArcIndex) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n            }\n            return \"none\";\n        });\n        // Update ribbons opacity and stroke based on animation state\n        svg.selectAll(\"path.ribbon\").transition().duration(300).style(\"opacity\", (d)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && highlightedArcIndex === d.source.index) {\n                    return 0.95; // Make connected ribbons very prominent\n                }\n                if (highlightedSide === \"right\" && highlightedArcIndex === d.target.index) {\n                    return 0.95; // Make connected ribbons very prominent\n                }\n                return 0.2; // Dim non-connected ribbons\n            }\n            return settings.isDarkMode ? 0.7 : 0.6;\n        }).style(\"stroke-width\", (d)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && highlightedArcIndex === d.source.index || highlightedSide === \"right\" && highlightedArcIndex === d.target.index) {\n                    return 2.5;\n                }\n            }\n            return 0.5;\n        }).style(\"stroke\", (d)=>{\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && highlightedArcIndex === d.source.index || highlightedSide === \"right\" && highlightedArcIndex === d.target.index) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n            }\n            return \"none\";\n        });\n    }, [\n        animationPhase,\n        highlightedArcIndex,\n        highlightedSide,\n        settings.isDarkMode\n    ]);\n    // Update visual styling of existing secondary chord elements when animation state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!secondarySvgRef.current || !showSecondaryChord) return;\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(secondarySvgRef.current);\n        // Update secondary chord elements based on their animation state\n        svg.selectAll(\"path.chord-group\").transition().duration(300).style(\"opacity\", (d, i)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === i) {\n                    return 1.0; // Source arc is fully highlighted\n                }\n                return 0.4; // Dim other arcs\n            }\n            return 0.8;\n        }).style(\"stroke-width\", (d, i)=>{\n            if (secondaryAnimationPhase === \"highlighting\" && secondaryHighlightedArcIndex === i) {\n                return 3;\n            }\n            return 1;\n        }).style(\"stroke\", (d, i)=>{\n            if (secondaryAnimationPhase === \"highlighting\" && secondaryHighlightedArcIndex === i) {\n                return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n            }\n            return \"none\";\n        });\n        svg.selectAll(\"path.chord\").transition().duration(300).style(\"opacity\", (d)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === d.source.index || secondaryHighlightedArcIndex === d.target.index) {\n                    return 0.95; // Make connected ribbons very prominent\n                }\n                return 0.2; // Dim non-connected ribbons\n            }\n            return settings.isDarkMode ? 0.7 : 0.6;\n        }).style(\"stroke-width\", (d)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === d.source.index || secondaryHighlightedArcIndex === d.target.index) {\n                    return 2.5;\n                }\n            }\n            return 0.5;\n        }).style(\"stroke\", (d)=>{\n            if (secondaryAnimationPhase === \"highlighting\") {\n                if (secondaryHighlightedArcIndex === d.source.index || secondaryHighlightedArcIndex === d.target.index) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n            }\n            return \"none\";\n        });\n    }, [\n        secondaryAnimationPhase,\n        secondaryHighlightedArcIndex,\n        secondaryHighlightedSide,\n        settings.isDarkMode,\n        showSecondaryChord\n    ]);\n    // Remove conflicting opacity update system - opacity will be handled in main rendering\n    // Pause/Resume animation functions (similar to AlluvialDiagram)\n    const pauseAnimation = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((reason)=>{\n        // Pause main chord animation\n        if (animationRef.current.running && !animationRef.current.isPaused) {\n            console.log(\"⏸️ Pausing Main Chord animation:\", reason);\n            animationRef.current.isPaused = true;\n            if (animationRef.current.timer) {\n                clearTimeout(animationRef.current.timer);\n                animationRef.current.timer = null;\n            }\n        }\n        // Pause secondary chord animation\n        if (secondaryAnimationRef.current.running && !secondaryAnimationRef.current.isPaused) {\n            console.log(\"⏸️ Pausing Secondary Chord animation:\", reason);\n            secondaryAnimationRef.current.isPaused = true;\n            if (secondaryAnimationRef.current.timer) {\n                clearTimeout(secondaryAnimationRef.current.timer);\n                secondaryAnimationRef.current.timer = null;\n            }\n        }\n    }, []);\n    const resumeAnimation = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((reason)=>{\n        // Resume main chord animation\n        if (animationRef.current.running && animationRef.current.isPaused) {\n            console.log(\"▶️ Resuming Main Chord animation:\", reason);\n            animationRef.current.isPaused = false;\n            // Restart the animation timer immediately\n            const restartMainAnimation = ()=>{\n                if (!animationRef.current.running || animationRef.current.isPaused) return;\n                console.log(\"\\uD83D\\uDD04 Restarting Main Chord animation after pause\");\n                setAnimationPhase(\"highlighting\");\n                setHighlightedArcIndex(animationRef.current.currentIndex);\n                setHighlightedSide(animationRef.current.currentSide);\n                // Calculate timing based on global settings\n                const stepDuration = Math.max(1000, (settings.autoPlaySpeed || 3000) / 4);\n                const pauseDuration = Math.max(200, stepDuration / 6);\n                // Get current data context\n                const filteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n                const leftValues = currentSource === \"years_at_medtronic\" ? [\n                    \"0-5\",\n                    \"6-10\",\n                    \"11-15\",\n                    \"16-20\",\n                    \"20+\"\n                ] : Array.from(new Set(filteredData.map((d)=>d[currentSource]))).filter(Boolean);\n                const rightValues = currentTarget === \"years_at_medtronic\" ? [\n                    \"0-5\",\n                    \"6-10\",\n                    \"11-15\",\n                    \"16-20\",\n                    \"20+\"\n                ] : Array.from(new Set(filteredData.map((d)=>d[currentTarget]))).filter(Boolean);\n                const currentSideLength = animationRef.current.currentSide === \"left\" ? leftValues.length : rightValues.length;\n                // Continue animation from current position\n                animationRef.current.timer = setTimeout(()=>{\n                    if (animationRef.current.running && !animationRef.current.isPaused) {\n                        if (animationRef.current.currentIndex < currentSideLength - 1) {\n                            animationRef.current.currentIndex++;\n                        } else {\n                            // Switch sides or restart\n                            if (animationRef.current.currentSide === \"left\") {\n                                animationRef.current.currentSide = \"right\";\n                                animationRef.current.currentIndex = 0;\n                            } else {\n                                animationRef.current.currentSide = \"left\";\n                                animationRef.current.currentIndex = 0;\n                            }\n                        }\n                        restartMainAnimation();\n                    }\n                }, stepDuration);\n            };\n            restartMainAnimation();\n        }\n        // Resume secondary chord animation\n        if (secondaryAnimationRef.current.running && secondaryAnimationRef.current.isPaused) {\n            console.log(\"▶️ Resuming Secondary Chord animation:\", reason);\n            secondaryAnimationRef.current.isPaused = false;\n            // Restart the secondary animation timer immediately\n            const restartSecondaryAnimation = ()=>{\n                if (!secondaryAnimationRef.current.running || secondaryAnimationRef.current.isPaused) return;\n                console.log(\"\\uD83D\\uDD04 Restarting Secondary Chord animation after pause\");\n                // Get secondary chord data context\n                const filteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n                const secondaryData = filteredData.filter((d)=>d.peak_performance);\n                const yearsCategories = [\n                    \"0-5\",\n                    \"6-10\",\n                    \"11-15\",\n                    \"16-20\",\n                    \"20+\"\n                ];\n                const peakPerfCategories = Array.from(new Set(secondaryData.map((d)=>d.peak_performance))).filter(Boolean).sort();\n                // Calculate the actual arc index based on side and position\n                const actualArcIndex = secondaryAnimationRef.current.currentSide === \"left\" ? secondaryAnimationRef.current.currentIndex : yearsCategories.length + secondaryAnimationRef.current.currentIndex;\n                setSecondaryAnimationPhase(\"highlighting\");\n                setSecondaryHighlightedArcIndex(actualArcIndex);\n                setSecondaryHighlightedSide(secondaryAnimationRef.current.currentSide);\n                // Calculate timing based on global settings\n                const stepDuration = Math.max(1000, (settings.autoPlaySpeed || 3000) / 4);\n                const currentSideLength = secondaryAnimationRef.current.currentSide === \"left\" ? yearsCategories.length : peakPerfCategories.length;\n                // Continue animation from current position\n                secondaryAnimationRef.current.timer = setTimeout(()=>{\n                    if (secondaryAnimationRef.current.running && !secondaryAnimationRef.current.isPaused) {\n                        if (secondaryAnimationRef.current.currentIndex < currentSideLength - 1) {\n                            secondaryAnimationRef.current.currentIndex++;\n                        } else {\n                            // Switch sides or restart\n                            if (secondaryAnimationRef.current.currentSide === \"left\") {\n                                secondaryAnimationRef.current.currentSide = \"right\";\n                                secondaryAnimationRef.current.currentIndex = 0;\n                            } else {\n                                secondaryAnimationRef.current.currentSide = \"left\";\n                                secondaryAnimationRef.current.currentIndex = 0;\n                            }\n                        }\n                        restartSecondaryAnimation();\n                    }\n                }, stepDuration);\n            };\n            restartSecondaryAnimation();\n        }\n    }, [\n        settings.autoPlaySpeed,\n        settings.useTestData,\n        data,\n        currentSource,\n        currentTarget\n    ]);\n    // Check if container is too small\n    const margin = {\n        top: 80,\n        right: 80,\n        bottom: 100,\n        left: 80\n    };\n    const chartWidth = width - margin.left - margin.right;\n    const chartHeight = height - margin.top - margin.bottom;\n    const isContainerTooSmall = chartWidth < 200 || chartHeight < 200;\n    // Render circular chord diagram\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (!svgRef.current || !data.length || isLoading || isContainerTooSmall) return;\n        // Clear previous content\n        d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current).selectAll(\"*\").remove();\n        // Filter data based on global settings\n        const filteredData = settings.useTestData ? data : data.filter((item)=>!item.test_data);\n        const svg = d3__WEBPACK_IMPORTED_MODULE_2__.select(svgRef.current);\n        // Adjust size based on whether we're showing two chords\n        const effectiveWidth = showSecondaryChord ? width * 0.45 : width;\n        const effectiveHeight = showSecondaryChord ? height * 0.8 : height * 0.85;\n        const effectiveChartWidth = effectiveWidth - margin.left - margin.right;\n        const effectiveChartHeight = effectiveHeight - margin.top - margin.bottom;\n        const radius = Math.max(120, Math.min(effectiveChartWidth, effectiveChartHeight) / 2 - 60);\n        // Create definitions for gradients\n        const defs = svg.append(\"defs\");\n        // Define fixed order for years at Medtronic\n        const YEARS_GROUPS = [\n            \"0-5\",\n            \"6-10\",\n            \"11-15\",\n            \"16-20\",\n            \"20+\"\n        ];\n        // Get unique values for left and right sides, using fixed order for years\n        const leftValues = currentSource === \"years_at_medtronic\" ? YEARS_GROUPS : Array.from(new Set(filteredData.map((d)=>d[currentSource]))).filter(Boolean);\n        const rightValues = currentTarget === \"years_at_medtronic\" ? YEARS_GROUPS : Array.from(new Set(filteredData.map((d)=>d[currentTarget]))).filter(Boolean);\n        // Process data for chord layout\n        const chordData = (0,_shared_chordUtils__WEBPACK_IMPORTED_MODULE_5__.processChordData)(filteredData, currentSource, currentTarget);\n        // Separate source and target categories\n        const sourceCategories = new Set();\n        const targetCategories = new Set();\n        filteredData.forEach((d)=>{\n            if (currentSource === \"years_at_medtronic\") {\n                sourceCategories.add((0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0));\n            } else {\n                sourceCategories.add(d[currentSource] || \"Unknown\");\n            }\n            if (currentTarget === \"years_at_medtronic\") {\n                targetCategories.add((0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0));\n            } else {\n                targetCategories.add(d[currentTarget] || \"Unknown\");\n            }\n        });\n        // Convert to arrays and sort\n        const sourceArray = Array.from(sourceCategories).sort();\n        const targetArray = Array.from(targetCategories).sort();\n        // Calculate totals for each category\n        const leftTotals = sourceArray.map((cat)=>filteredData.filter((d)=>{\n                const value = currentSource === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentSource];\n                return value === cat;\n            }).length);\n        const rightTotals = targetArray.map((cat)=>filteredData.filter((d)=>{\n                const value = currentTarget === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentTarget];\n                return value === cat;\n            }).length);\n        const leftTotalSum = leftTotals.reduce((sum, val)=>sum + val, 0);\n        const rightTotalSum = rightTotals.reduce((sum, val)=>sum + val, 0);\n        // Create connection matrix\n        const connectionMatrix = sourceArray.map((sourceCat)=>targetArray.map((targetCat)=>{\n                return filteredData.filter((d)=>{\n                    const source = currentSource === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentSource];\n                    const target = currentTarget === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0) : d[currentTarget];\n                    return source === sourceCat && target === targetCat;\n                }).length;\n            }));\n        // Check if this is a category change that should trigger animation\n        const isCategoryChange = lastCategoryChange.source !== currentSource || lastCategoryChange.target !== currentTarget;\n        // Add smooth transitions for category changes\n        const transition = d3__WEBPACK_IMPORTED_MODULE_2__.transition().duration(isCategoryChange ? 750 : 200).ease(d3__WEBPACK_IMPORTED_MODULE_2__.easeCubicInOut);\n        // Faster transition for hover interactions\n        const hoverTransition = d3__WEBPACK_IMPORTED_MODULE_2__.transition().duration(75).ease(d3__WEBPACK_IMPORTED_MODULE_2__.easeQuadOut);\n        // --- True left/right bipartite layout with better spacing ---\n        // Left arcs: 180°+gap to 360°-gap (Math.PI+gap to 2*Math.PI-gap)\n        // Right arcs: 0+gap to 180°-gap (0+gap to Math.PI-gap)\n        const arcGap = Math.PI * 0.12; // Larger gap for better label spacing\n        const leftStart = Math.PI + arcGap; // 180° + gap\n        const leftEnd = 2 * Math.PI - arcGap; // 360° - gap\n        const rightStart = 0 + arcGap; // 0° + gap\n        const rightEnd = Math.PI - arcGap; // 180° - gap\n        const leftArcSpan = leftEnd - leftStart; // 180° - 2*gap\n        const rightArcSpan = rightEnd - rightStart; // 180° - 2*gap\n        // Add minimum spacing between arcs to prevent label overlap\n        const minArcSpacing = Math.PI * 0.02; // Minimum 2° between arcs\n        // Assign arc angles for left arcs with proper spacing\n        let leftAngle = leftStart;\n        const leftArcs = leftValues.map((value, i)=>{\n            const count = filteredData.filter((d)=>currentSource === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0) === value : d[currentSource] === value).length;\n            // Calculate arc span with spacing consideration\n            const availableSpan = leftArcSpan - minArcSpacing * (leftValues.length - 1);\n            const arcSpan = currentSource === \"years_at_medtronic\" ? availableSpan / leftValues.length : Math.max(minArcSpacing, availableSpan * (count / (leftTotalSum || 1)));\n            const startAngle = leftAngle;\n            const endAngle = leftAngle + arcSpan;\n            leftAngle = endAngle + minArcSpacing; // Add spacing between arcs\n            const color = getNodeColor(value, currentSource, settings.categoryColors, settings.isDarkMode);\n            const opacity = count === 0 ? 0.15 : 0.8;\n            return {\n                name: value,\n                value: count,\n                startAngle,\n                endAngle,\n                color,\n                opacity\n            };\n        });\n        // Assign arc angles for right arcs with proper spacing\n        let rightAngle = rightStart;\n        const rightArcs = rightValues.map((value, i)=>{\n            const count = filteredData.filter((d)=>currentTarget === \"years_at_medtronic\" ? (0,_shared_colorUtils__WEBPACK_IMPORTED_MODULE_8__.getYearsCategory)(d.years_at_medtronic || 0) === value : d[currentTarget] === value).length;\n            // Calculate arc span with spacing consideration\n            const availableSpan = rightArcSpan - minArcSpacing * (rightValues.length - 1);\n            const arcSpan = currentTarget === \"years_at_medtronic\" ? availableSpan / rightValues.length : Math.max(minArcSpacing, availableSpan * (count / (rightTotalSum || 1)));\n            const startAngle = rightAngle;\n            const endAngle = rightAngle + arcSpan;\n            rightAngle = endAngle + minArcSpacing; // Add spacing between arcs\n            const color = getNodeColor(value, currentTarget, settings.categoryColors, settings.isDarkMode);\n            const opacity = count === 0 ? 0.15 : 0.8;\n            return {\n                name: value,\n                value: count,\n                startAngle,\n                endAngle,\n                color,\n                opacity\n            };\n        });\n        // Draw arcs (use per-arc opacity)\n        const innerRadius = Math.max(60, radius * 0.75);\n        const outerRadius = Math.max(80, radius * 0.95);\n        const arcGen = d3__WEBPACK_IMPORTED_MODULE_2__.arc().innerRadius(innerRadius).outerRadius(outerRadius).cornerRadius((d)=>{\n            // Only round the outer corners (outerRadius), not the inner\n            // D3 v7+ supports cornerRadius as a function\n            // We'll return 0 for inner, 8 for outer\n            // But d3.arc() only supports one value, so we need to use custom path if we want true squared inner corners\n            // As a workaround, set cornerRadius to 0 if the arc is small, else 8\n            return 0;\n        });\n        // Position the chart group with margins to prevent cropping\n        const g = svg.append(\"g\").attr(\"transform\", \"translate(\".concat(margin.left + effectiveChartWidth / 2, \", \").concat(margin.top + effectiveChartHeight / 2, \")\"));\n        // Add gradients for arcs\n        leftArcs.forEach((arc, i)=>{\n            var _d3_color;\n            const baseColor = arc.color;\n            const lighterColor = ((_d3_color = d3__WEBPACK_IMPORTED_MODULE_2__.color(baseColor)) === null || _d3_color === void 0 ? void 0 : _d3_color.brighter(0.3).toString()) || baseColor;\n            defs.append(\"linearGradient\").attr(\"id\", \"left-arc-gradient-\".concat(i)).attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", 0).attr(\"y2\", 1).selectAll(\"stop\").data([\n                {\n                    offset: \"0%\",\n                    color: baseColor\n                },\n                {\n                    offset: \"100%\",\n                    color: lighterColor\n                }\n            ]).enter().append(\"stop\").attr(\"offset\", (d)=>d.offset).attr(\"stop-color\", (d)=>d.color);\n        });\n        rightArcs.forEach((arc, i)=>{\n            var _d3_color;\n            const baseColor = arc.color;\n            const lighterColor = ((_d3_color = d3__WEBPACK_IMPORTED_MODULE_2__.color(baseColor)) === null || _d3_color === void 0 ? void 0 : _d3_color.brighter(0.3).toString()) || baseColor;\n            defs.append(\"linearGradient\").attr(\"id\", \"right-arc-gradient-\".concat(i)).attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", 0).attr(\"y1\", 0).attr(\"x2\", 0).attr(\"y2\", 1).selectAll(\"stop\").data([\n                {\n                    offset: \"0%\",\n                    color: baseColor\n                },\n                {\n                    offset: \"100%\",\n                    color: lighterColor\n                }\n            ]).enter().append(\"stop\").attr(\"offset\", (d)=>d.offset).attr(\"stop-color\", (d)=>d.color);\n        });\n        // Create left arcs with event handlers first\n        const leftArcSelection = g.selectAll(\"path.left-arc\").data(leftArcs).enter().append(\"path\").attr(\"class\", \"left-arc\").attr(\"d\", (d)=>arcGen({\n                startAngle: d.startAngle,\n                endAngle: d.endAngle\n            })).attr(\"fill\", (d, i)=>\"url(#left-arc-gradient-\".concat(i, \")\")).attr(\"opacity\", 0).on(\"mouseenter\", function(event, d) {\n            if (d.value === 0) return;\n            pauseAnimation(\"left arc hover\");\n            // Trigger the same highlighting as auto-cycle animation\n            const arcIndex = leftArcs.findIndex((arc)=>arc.name === d.name);\n            setAnimationPhase(\"highlighting\");\n            setHighlightedArcIndex(arcIndex);\n            setHighlightedSide(\"left\");\n            // Apply immediate hover transitions\n            g.selectAll(\"path.left-arc, path.right-arc, path.ribbon\").transition(hoverTransition).attr(\"opacity\", function(hoverD) {\n                const element = d3__WEBPACK_IMPORTED_MODULE_2__.select(this);\n                if (element.classed(\"left-arc\")) {\n                    const i = leftArcs.findIndex((arc)=>arc.name === hoverD.name);\n                    return i === arcIndex ? 1.0 : 0.4;\n                } else if (element.classed(\"right-arc\")) {\n                    const i = rightArcs.findIndex((arc)=>arc.name === hoverD.name);\n                    const matrixValue = connectionMatrix[arcIndex] && connectionMatrix[arcIndex][i];\n                    return matrixValue > 0 ? 0.95 : 0.3;\n                } else if (element.classed(\"ribbon\")) {\n                    return hoverD.source.index === arcIndex ? 0.95 : 0.2;\n                }\n                return 0.3;\n            });\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: (d.name || \"Unknown\").toString().replace(/_/g, \" \")\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1336,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Count: \",\n                                d.value\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1337,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 1335,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", ()=>{\n            resumeAnimation(\"left arc hover end\");\n            setTooltip(null);\n            // Reset highlighting when animation resumes\n            setAnimationPhase(\"full\");\n            setHighlightedArcIndex(null);\n            setHighlightedSide(null);\n            // Apply immediate reset transitions\n            g.selectAll(\"path.left-arc, path.right-arc, path.ribbon\").transition(hoverTransition).attr(\"opacity\", function(resetD) {\n                const element = d3__WEBPACK_IMPORTED_MODULE_2__.select(this);\n                if (element.classed(\"left-arc\") || element.classed(\"right-arc\")) {\n                    return Math.max(0.8, resetD.opacity);\n                } else if (element.classed(\"ribbon\")) {\n                    return settings.isDarkMode ? 0.7 : 0.6;\n                }\n                return 0.8;\n            });\n        });\n        // Apply transition animations separately\n        leftArcSelection.transition(transition).attr(\"opacity\", (d, i)=>{\n            // Apply full relationship chain highlighting\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\") {\n                    // Highlight the source arc\n                    if (i === highlightedArcIndex) {\n                        return 1.0; // Source arc is fully highlighted\n                    }\n                    // Check if this arc is connected to the highlighted right arc\n                    if (highlightedSide === \"left\" && highlightedArcIndex !== null) {\n                        return 0.4; // Dim other left arcs\n                    }\n                } else if (highlightedSide === \"right\" && highlightedArcIndex !== null) {\n                    var _leftArcs_i, _rightArcs_highlightedArcIndex;\n                    // When right arc is highlighted, highlight left arcs connected to it\n                    const matrixValue = connectionMatrix[i] && connectionMatrix[i][highlightedArcIndex];\n                    const isConnectedToHighlightedRight = matrixValue > 0;\n                    console.log(\"\\uD83D\\uDD17 Left arc \".concat(i, \" (\").concat((_leftArcs_i = leftArcs[i]) === null || _leftArcs_i === void 0 ? void 0 : _leftArcs_i.name, \") connected to right arc \").concat(highlightedArcIndex, \" (\").concat((_rightArcs_highlightedArcIndex = rightArcs[highlightedArcIndex]) === null || _rightArcs_highlightedArcIndex === void 0 ? void 0 : _rightArcs_highlightedArcIndex.name, \")?\"), isConnectedToHighlightedRight, \"Matrix value:\", matrixValue);\n                    return isConnectedToHighlightedRight ? 0.95 : 0.3; // Higher contrast\n                }\n            }\n            // Use stable base opacity without pulsing to prevent flickering\n            return Math.max(0.8, d.opacity);\n        }).attr(\"stroke-width\", (d, i)=>{\n            // Enhanced stroke for relationship chain\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && i === highlightedArcIndex) {\n                    return 3; // Thickest stroke for source arc\n                }\n                // Stroke for connected arcs when right side is highlighted\n                if (highlightedSide === \"right\" && highlightedArcIndex !== null) {\n                    const matrixValue = connectionMatrix[i] && connectionMatrix[i][highlightedArcIndex];\n                    if (matrixValue > 0) {\n                        return 2; // Medium stroke for connected arcs\n                    }\n                }\n            }\n            return 1;\n        }).attr(\"stroke\", (d, i)=>{\n            // Enhanced stroke color for relationship chain\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && i === highlightedArcIndex) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n                // Stroke for connected arcs when right side is highlighted\n                if (highlightedSide === \"right\" && highlightedArcIndex !== null) {\n                    const matrixValue = connectionMatrix[i] && connectionMatrix[i][highlightedArcIndex];\n                    if (matrixValue > 0) {\n                        return settings.isDarkMode ? \"rgba(255,255,255,0.3)\" : \"rgba(0,0,0,0.2)\";\n                    }\n                }\n            }\n            return \"none\";\n        });\n        // Create right arcs with event handlers first\n        const rightArcSelection = g.selectAll(\"path.right-arc\").data(rightArcs).enter().append(\"path\").attr(\"class\", \"right-arc\").attr(\"d\", (d)=>arcGen({\n                startAngle: d.startAngle,\n                endAngle: d.endAngle\n            })).attr(\"fill\", (d, i)=>\"url(#right-arc-gradient-\".concat(i, \")\")).attr(\"opacity\", 0).on(\"mouseenter\", function(event, d) {\n            if (d.value === 0) return;\n            pauseAnimation(\"arc hover\");\n            // Trigger the same highlighting as auto-cycle animation\n            const arcIndex = rightArcs.findIndex((arc)=>arc.name === d.name);\n            console.log(\"\\uD83C\\uDFAF Hover triggering right arc highlighting:\", {\n                arcName: d.name,\n                arcIndex: arcIndex\n            });\n            setAnimationPhase(\"highlighting\");\n            setHighlightedArcIndex(arcIndex);\n            setHighlightedSide(\"right\");\n            // Apply immediate hover transitions\n            g.selectAll(\"path.left-arc, path.right-arc, path.ribbon\").transition(hoverTransition).attr(\"opacity\", function(hoverD) {\n                const element = d3__WEBPACK_IMPORTED_MODULE_2__.select(this);\n                if (element.classed(\"right-arc\")) {\n                    const i = rightArcs.findIndex((arc)=>arc.name === hoverD.name);\n                    return i === arcIndex ? 1.0 : 0.4;\n                } else if (element.classed(\"left-arc\")) {\n                    const i = leftArcs.findIndex((arc)=>arc.name === hoverD.name);\n                    const matrixValue = connectionMatrix[i] && connectionMatrix[i][arcIndex];\n                    return matrixValue > 0 ? 0.95 : 0.3;\n                } else if (element.classed(\"ribbon\")) {\n                    return hoverD.target.index === arcIndex ? 0.95 : 0.2;\n                }\n                return 0.3;\n            });\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: (d.name || \"Unknown\").toString().replace(/_/g, \" \")\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1471,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Count: \",\n                                d.value\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1472,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 1470,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", ()=>{\n            resumeAnimation(\"arc hover end\");\n            setTooltip(null);\n            // Reset highlighting when animation resumes\n            setAnimationPhase(\"full\");\n            setHighlightedArcIndex(null);\n            setHighlightedSide(null);\n            // Apply immediate reset transitions\n            g.selectAll(\"path.left-arc, path.right-arc, path.ribbon\").transition(hoverTransition).attr(\"opacity\", function(resetD) {\n                const element = d3__WEBPACK_IMPORTED_MODULE_2__.select(this);\n                if (element.classed(\"left-arc\") || element.classed(\"right-arc\")) {\n                    return Math.max(0.8, resetD.opacity);\n                } else if (element.classed(\"ribbon\")) {\n                    return settings.isDarkMode ? 0.7 : 0.6;\n                }\n                return 0.8;\n            });\n        });\n        // Apply transition animations separately\n        rightArcSelection.transition(transition).attr(\"opacity\", (d, i)=>{\n            // Apply full relationship chain highlighting\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"right\") {\n                    // Highlight the source arc\n                    if (i === highlightedArcIndex) {\n                        return 1.0; // Source arc is fully highlighted\n                    }\n                    return 0.4; // Dim other right arcs\n                } else if (highlightedSide === \"left\" && highlightedArcIndex !== null) {\n                    var _rightArcs_i, _leftArcs_highlightedArcIndex;\n                    // When left arc is highlighted, highlight right arcs connected to it\n                    const matrixValue = connectionMatrix[highlightedArcIndex] && connectionMatrix[highlightedArcIndex][i];\n                    const isConnectedToHighlightedLeft = matrixValue > 0;\n                    console.log(\"\\uD83D\\uDD17 Right arc \".concat(i, \" (\").concat((_rightArcs_i = rightArcs[i]) === null || _rightArcs_i === void 0 ? void 0 : _rightArcs_i.name, \") connected to left arc \").concat(highlightedArcIndex, \" (\").concat((_leftArcs_highlightedArcIndex = leftArcs[highlightedArcIndex]) === null || _leftArcs_highlightedArcIndex === void 0 ? void 0 : _leftArcs_highlightedArcIndex.name, \")?\"), isConnectedToHighlightedLeft, \"Matrix value:\", matrixValue);\n                    return isConnectedToHighlightedLeft ? 0.95 : 0.3; // Higher contrast\n                }\n            }\n            // Use stable base opacity without pulsing to prevent flickering\n            return Math.max(0.8, d.opacity);\n        }).attr(\"stroke-width\", (d, i)=>{\n            // Enhanced stroke for relationship chain\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"right\" && i === highlightedArcIndex) {\n                    return 3; // Thickest stroke for source arc\n                }\n                // Stroke for connected arcs when left side is highlighted\n                if (highlightedSide === \"left\" && highlightedArcIndex !== null) {\n                    const matrixValue = connectionMatrix[highlightedArcIndex] && connectionMatrix[highlightedArcIndex][i];\n                    if (matrixValue > 0) {\n                        return 2; // Medium stroke for connected arcs\n                    }\n                }\n            }\n            return 1;\n        }).attr(\"stroke\", (d, i)=>{\n            // Enhanced stroke color for relationship chain\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"right\" && i === highlightedArcIndex) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n                // Stroke for connected arcs when left side is highlighted\n                if (highlightedSide === \"left\" && highlightedArcIndex !== null) {\n                    const matrixValue = connectionMatrix[highlightedArcIndex] && connectionMatrix[highlightedArcIndex][i];\n                    if (matrixValue > 0) {\n                        return settings.isDarkMode ? \"rgba(255,255,255,0.3)\" : \"rgba(0,0,0,0.2)\";\n                    }\n                }\n            }\n            return \"none\";\n        });\n        // Draw ribbons for connections (distributed along arc, proportional thickness)\n        // Use d3.ribbon() for each connection, but set the width by using the full segment for each connection\n        const ribbonRadius = Math.max(60, radius * 0.75); // Ensure minimum radius for ribbons\n        const ribbonGen = d3__WEBPACK_IMPORTED_MODULE_2__.ribbon().radius(ribbonRadius);\n        const connections = [];\n        for(let i = 0; i < sourceArray.length; i++){\n            for(let j = 0; j < targetArray.length; j++){\n                const value = connectionMatrix[i][j];\n                if (value > 0) {\n                    // Find the segment for this connection on both arcs\n                    const leftSeg = leftArcs[i];\n                    const rightSeg = rightArcs[j];\n                    // Compute arc midpoints for gradient direction\n                    const leftMidAngle = (leftSeg.startAngle + leftSeg.endAngle) / 2 - Math.PI / 2;\n                    const rightMidAngle = (rightSeg.startAngle + rightSeg.endAngle) / 2 - Math.PI / 2;\n                    const leftX = Math.cos(leftMidAngle) * ribbonRadius;\n                    const leftY = Math.sin(leftMidAngle) * ribbonRadius;\n                    const rightX = Math.cos(rightMidAngle) * ribbonRadius;\n                    const rightY = Math.sin(rightMidAngle) * ribbonRadius;\n                    // Add gradient for this ribbon\n                    const leftColor = leftArcs[i].color || d3__WEBPACK_IMPORTED_MODULE_2__.schemeCategory10[i % 10];\n                    const rightColor = rightArcs[j].color || d3__WEBPACK_IMPORTED_MODULE_2__.schemeCategory10[(j + 5) % 10];\n                    defs.append(\"linearGradient\").attr(\"id\", \"ribbon-gradient-\".concat(i, \"-\").concat(j)).attr(\"gradientUnits\", \"userSpaceOnUse\").attr(\"x1\", leftX).attr(\"y1\", leftY).attr(\"x2\", rightX).attr(\"y2\", rightY).selectAll(\"stop\").data([\n                        {\n                            offset: \"0%\",\n                            color: leftColor\n                        },\n                        {\n                            offset: \"100%\",\n                            color: rightColor\n                        }\n                    ]).enter().append(\"stop\").attr(\"offset\", (d)=>d.offset).attr(\"stop-color\", (d)=>d.color);\n                    connections.push({\n                        source: {\n                            startAngle: leftSeg.startAngle,\n                            endAngle: leftSeg.endAngle,\n                            index: i\n                        },\n                        target: {\n                            startAngle: rightSeg.startAngle,\n                            endAngle: rightSeg.endAngle,\n                            index: j\n                        },\n                        value,\n                        left: leftArcs[i],\n                        right: rightArcs[j],\n                        gradientId: \"ribbon-gradient-\".concat(i, \"-\").concat(j)\n                    });\n                }\n            }\n        }\n        // Create ribbons with event handlers first\n        const ribbonSelection = g.selectAll(\"path.ribbon\").data(connections).enter().append(\"path\").attr(\"class\", \"ribbon\").attr(\"d\", function(d) {\n            const path = ribbonGen({\n                source: d.source,\n                target: d.target\n            });\n            return typeof path === \"string\" ? path : \"\";\n        }).attr(\"fill\", (d)=>\"url(#\".concat(d.gradientId, \")\")).attr(\"opacity\", 0).on(\"mouseenter\", function(event, d) {\n            pauseAnimation(\"ribbon hover\");\n            // Trigger highlighting for the source side of this ribbon (same as auto-cycle)\n            console.log(\"\\uD83C\\uDFAF Hover triggering ribbon highlighting:\", {\n                leftArcName: d.left.name,\n                rightArcName: d.right.name,\n                sourceIndex: d.source.index,\n                targetIndex: d.target.index\n            });\n            setAnimationPhase(\"highlighting\");\n            setHighlightedArcIndex(d.source.index);\n            setHighlightedSide(\"left\");\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: [\n                                (d.left.name || \"Unknown\").toString().replace(/_/g, \" \"),\n                                \" ↔ \",\n                                (d.right.name || \"Unknown\").toString().replace(/_/g, \" \")\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1643,\n                            columnNumber: 15\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Connections: \",\n                                d.value\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1646,\n                            columnNumber: 15\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 1642,\n                    columnNumber: 13\n                }, this)\n            });\n        }).on(\"mouseleave\", function(event, d) {\n            resumeAnimation(\"ribbon hover end\");\n            setTooltip(null);\n            // Reset highlighting when animation resumes\n            setAnimationPhase(\"full\");\n            setHighlightedArcIndex(null);\n            setHighlightedSide(null);\n        });\n        // Apply transition animations separately\n        ribbonSelection.transition(transition).attr(\"opacity\", (d)=>{\n            // Highlight ribbons connected to highlighted arcs with enhanced visibility\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && highlightedArcIndex === d.source.index) {\n                    return 0.95; // Make connected ribbons very prominent\n                }\n                if (highlightedSide === \"right\" && highlightedArcIndex === d.target.index) {\n                    return 0.95; // Make connected ribbons very prominent\n                }\n                return 0.2; // Dim non-connected ribbons more for better contrast\n            }\n            // Use stable base opacity without pulsing\n            return settings.isDarkMode ? 0.7 : 0.6;\n        }).attr(\"stroke-width\", (d)=>{\n            // Enhanced stroke for highlighted ribbons to show connections clearly\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && highlightedArcIndex === d.source.index || highlightedSide === \"right\" && highlightedArcIndex === d.target.index) {\n                    return 2.5; // Slightly thicker for better visibility\n                }\n            }\n            return 0.5;\n        }).attr(\"stroke\", (d)=>{\n            // Enhanced stroke color for highlighted connections\n            if (animationPhase === \"highlighting\") {\n                if (highlightedSide === \"left\" && highlightedArcIndex === d.source.index || highlightedSide === \"right\" && highlightedArcIndex === d.target.index) {\n                    return settings.isDarkMode ? \"rgba(255,255,255,0.4)\" : \"rgba(0,0,0,0.3)\";\n                }\n            }\n            return \"none\";\n        });\n        // --- Label placement: properly spaced around circle ---\n        const labelRadius = Math.max(120, radius * 1.45); // Even more space for full text labels\n        const labelGroup = svg.append(\"g\").attr(\"transform\", \"translate(\".concat(margin.left + effectiveChartWidth / 2, \", \").concat(margin.top + effectiveChartHeight / 2, \")\"));\n        // Combine all arcs for unified label placement\n        const allArcs = [\n            ...leftArcs.map((arc)=>({\n                    ...arc,\n                    side: \"left\"\n                })),\n            ...rightArcs.map((arc)=>({\n                    ...arc,\n                    side: \"right\"\n                }))\n        ];\n        // Add labels with smart positioning to avoid overlap\n        labelGroup.selectAll(\"text.arc-label\").data(allArcs).enter().append(\"text\").attr(\"class\", \"arc-label\").attr(\"transform\", (d)=>{\n            const angle = (d.startAngle + d.endAngle) / 2 - Math.PI / 2;\n            const x = labelRadius * Math.cos(angle);\n            const y = labelRadius * Math.sin(angle);\n            const rotation = angle * 180 / Math.PI;\n            // Rotate text for better readability\n            if (angle > Math.PI / 2 || angle < -Math.PI / 2) {\n                return \"translate(\".concat(x, \", \").concat(y, \") rotate(\").concat(rotation + 180, \")\");\n            } else {\n                return \"translate(\".concat(x, \", \").concat(y, \") rotate(\").concat(rotation, \")\");\n            }\n        }).attr(\"text-anchor\", (d)=>{\n            const angle = (d.startAngle + d.endAngle) / 2 - Math.PI / 2;\n            if (angle > Math.PI / 2 || angle < -Math.PI / 2) {\n                return \"end\";\n            } else {\n                return \"start\";\n            }\n        }).attr(\"alignment-baseline\", \"middle\").style(\"font-family\", labelFontFamily).style(\"font-weight\", labelFontWeight).style(\"font-size\", (d)=>{\n            // Dynamic font size based on number of labels - larger since we're showing full text\n            const totalLabels = allArcs.length;\n            if (totalLabels > 12) return \"13px\";\n            if (totalLabels > 10) return \"14px\";\n            if (totalLabels > 8) return \"15px\";\n            return \"\".concat(Math.max(16, labelFontSize), \"px\");\n        }).style(\"fill\", labelColor).style(\"text-transform\", \"uppercase\").text((d)=>{\n            const text = (d.name || \"Unknown\").toString().replace(/_/g, \" \");\n            // Show full text - no truncation\n            return text;\n        }).on(\"mouseenter\", function(event, d) {\n            pauseAnimation(\"label hover\");\n            const fullText = (d.name || \"Unknown\").toString().replace(/_/g, \" \");\n            setTooltip({\n                x: event.pageX,\n                y: event.pageY,\n                content: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            style: {\n                                fontWeight: \"bold\",\n                                marginBottom: 4\n                            },\n                            children: fullText\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1759,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Count: \",\n                                d.value\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1760,\n                            columnNumber: 16\n                        }, this),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            children: [\n                                \"Side: \",\n                                d.side\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1761,\n                            columnNumber: 16\n                        }, this)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                    lineNumber: 1758,\n                    columnNumber: 14\n                }, this)\n            });\n        }).on(\"mouseleave\", ()=>{\n            resumeAnimation(\"label hover end\");\n            setTooltip(null);\n        });\n        // Update insights\n        const totalConnections = connections.reduce((sum, d)=>sum + d.value, 0);\n        const strongestConnection = connections.length > 0 ? connections.reduce((max, d)=>d.value > max.value ? d : max, connections[0]) : null;\n        setInsights([\n            {\n                title: \"Total Responses\",\n                value: filteredData.length.toString()\n            },\n            {\n                title: \"Current View\",\n                value: \"\".concat(currentSource, \" ↔ \").concat(currentTarget)\n            },\n            strongestConnection ? {\n                title: \"Strongest Connection\",\n                value: \"\".concat(strongestConnection.left.name || \"Unknown\", \" ↔ \").concat(strongestConnection.right.name || \"Unknown\"),\n                description: \"\".concat(strongestConnection.value, \" connections\")\n            } : {\n                title: \"Strongest Connection\",\n                value: \"No connections found\",\n                description: \"\"\n            },\n            {\n                title: \"Total Connections\",\n                value: totalConnections.toString()\n            }\n        ]);\n    }, [\n        data,\n        currentSource,\n        currentTarget,\n        settings.useTestData,\n        settings.categoryColors,\n        isLoading,\n        lastCategoryChange,\n        isContainerTooSmall,\n        chartWidth,\n        chartHeight,\n        showSecondaryChord,\n        settings.isDarkMode\n    ]);\n    // Render secondary chord when peak performance is involved\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (showSecondaryChord) {\n            renderSecondaryChord();\n        }\n    }, [\n        showSecondaryChord,\n        data,\n        settings.useTestData,\n        settings.isDarkMode,\n        labelColor\n    ]);\n    // Tooltip rendering\n    const tooltipEl = tooltip ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            position: \"absolute\",\n            left: tooltip.x + 16,\n            top: tooltip.y + 16,\n            background: \"rgba(20,20,30,0.98)\",\n            color: \"#fff\",\n            padding: \"10px 16px\",\n            borderRadius: 8,\n            pointerEvents: \"none\",\n            zIndex: 100,\n            fontFamily: \"Avenir Next World, sans-serif\",\n            fontWeight: 600,\n            fontSize: 16,\n            boxShadow: \"0 4px 24px 0 rgba(16, 16, 235, 0.12)\",\n            maxWidth: 320\n        },\n        role: \"tooltip\",\n        \"aria-live\": \"polite\",\n        children: tooltip.content\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n        lineNumber: 1800,\n        columnNumber: 5\n    }, this) : null;\n    // Apply theme based on global settings\n    const themeClass = settings.isDarkMode ? \"dark\" : \"\";\n    const backgroundColor = settings.isDarkMode ? \"#1a1a1a\" : \"#ffffff\";\n    const textColor = settings.isDarkMode ? \"#ffffff\" : \"#0A0A0F\";\n    // Handle case where container is too small\n    if (isContainerTooSmall) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full h-full flex items-center justify-center \".concat(themeClass),\n            style: {\n                backgroundColor\n            },\n            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"text-center\",\n                style: {\n                    color: textColor\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-lg mb-2\",\n                        children: \"Container too small\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                        lineNumber: 1834,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        className: \"text-sm opacity-70\",\n                        children: \"Minimum size: 200x200px\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                        lineNumber: 1835,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                lineNumber: 1833,\n                columnNumber: 9\n            }, this)\n        }, void 0, false, {\n            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n            lineNumber: 1832,\n            columnNumber: 7\n        }, this);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full h-full flex flex-col items-center justify-center \".concat(themeClass),\n        style: {\n            backgroundColor\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_shared_GlobalControlsNav__WEBPACK_IMPORTED_MODULE_7__[\"default\"], {}, void 0, false, {\n                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                lineNumber: 1843,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-full h-full flex flex-col items-center justify-center\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"w-full flex flex-col items-center justify-center mb-4\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_shared_QuestionSelector__WEBPACK_IMPORTED_MODULE_4__.QuestionSelector, {\n                            availableFields: availableFields,\n                            currentSource: currentSource,\n                            currentTarget: currentTarget,\n                            onChange: (source, target)=>{\n                                const corrected = ensureDifferentCategories(source, target);\n                                setCurrentSource(corrected.source);\n                                setCurrentTarget(corrected.target);\n                                setLastCategoryChange(corrected);\n                            }\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                            lineNumber: 1846,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                        lineNumber: 1845,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"w-full flex justify-center items-center relative\",\n                        style: {\n                            height: height * 0.85\n                        },\n                        children: [\n                            showSecondaryChord ? // Two-chord layout when peak performance is involved\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"w-full flex justify-center items-center gap-16\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex flex-col items-center\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-lg font-bold mb-4\",\n                                                style: {\n                                                    color: textColor\n                                                },\n                                                children: \"Main Relationships\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                                lineNumber: 1866,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                ref: svgRef,\n                                                width: width * 0.45,\n                                                height: height * 0.8,\n                                                style: {\n                                                    display: \"block\",\n                                                    background: \"transparent\",\n                                                    color: textColor\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                                lineNumber: 1869,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                        lineNumber: 1865,\n                                        columnNumber: 15\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"flex flex-col items-center\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-lg font-bold mb-4\",\n                                                style: {\n                                                    color: textColor\n                                                },\n                                                children: \"Years \\xd7 Performance Types\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                                lineNumber: 1877,\n                                                columnNumber: 17\n                                            }, this),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                                ref: secondarySvgRef,\n                                                width: width * 0.45,\n                                                height: height * 0.8,\n                                                style: {\n                                                    display: \"block\",\n                                                    background: \"transparent\",\n                                                    color: textColor\n                                                }\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                                lineNumber: 1880,\n                                                columnNumber: 17\n                                            }, this)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                        lineNumber: 1876,\n                                        columnNumber: 15\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                lineNumber: 1864,\n                                columnNumber: 13\n                            }, this) : // Single chord layout when peak performance is not involved\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"svg\", {\n                                ref: svgRef,\n                                width: width,\n                                height: height * 0.85,\n                                style: {\n                                    display: \"block\",\n                                    margin: \"0 auto\",\n                                    background: \"transparent\",\n                                    color: textColor\n                                }\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                                lineNumber: 1890,\n                                columnNumber: 13\n                            }, this),\n                            tooltipEl\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                        lineNumber: 1858,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n                lineNumber: 1844,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\artin\\\\Downloads\\\\MEDTRONIC\\\\MEDTRONIC\\\\src\\\\components\\\\DataVisualization\\\\ChordDiagram.tsx\",\n        lineNumber: 1842,\n        columnNumber: 5\n    }, this);\n}\n_s(ChordDiagram, \"PRY4Nrx3/+HD/tvlaYz0Z7rlZnY=\", false, function() {\n    return [\n        _shared_useVisualizationData__WEBPACK_IMPORTED_MODULE_3__.useVisualizationData,\n        _lib_context_AppContext__WEBPACK_IMPORTED_MODULE_6__.useAppContext\n    ];\n});\n_c = ChordDiagram;\nvar _c;\n$RefreshReg$(_c, \"ChordDiagram\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/DataVisualization/ChordDiagram.tsx\n"));

/***/ })

});